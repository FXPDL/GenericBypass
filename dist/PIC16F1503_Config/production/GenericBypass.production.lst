

Microchip Technology PIC LITE Macro Assembler V1.37 build -260352376 
                                                                                               Fri Aug 26 22:49:00 2016

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	16F1503
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	inittext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,delta=2
    20                           	psect	text8,local,class=CODE,merge=1,delta=2
    21                           	psect	text9,local,class=CODE,merge=1,delta=2
    22                           	psect	text10,local,class=CODE,merge=1,delta=2
    23                           	psect	text11,local,class=CODE,merge=1,delta=2
    24                           	psect	text12,local,class=CODE,merge=1,delta=2
    25                           	psect	text13,local,class=CODE,merge=1,delta=2
    26                           	psect	text14,local,class=CODE,merge=1,delta=2
    27                           	psect	text15,local,class=CODE,merge=1,delta=2
    28                           	psect	text16,local,class=CODE,merge=1,delta=2
    29                           	psect	text17,local,class=CODE,merge=1,delta=2
    30                           	psect	text18,local,class=CODE,merge=1,delta=2
    31                           	psect	text19,local,class=CODE,merge=1,delta=2
    32                           	psect	text20,local,class=CODE,merge=1,delta=2
    33                           	psect	text21,local,class=CODE,merge=1,delta=2
    34                           	psect	text22,local,class=CODE,merge=1,delta=2
    35                           	psect	intentry,global,class=CODE,delta=2
    36                           	dabs	1,0x7E,2
    37  0000                     	;# 
    38  0001                     	;# 
    39  0002                     	;# 
    40  0003                     	;# 
    41  0004                     	;# 
    42  0005                     	;# 
    43  0006                     	;# 
    44  0007                     	;# 
    45  0008                     	;# 
    46  0009                     	;# 
    47  000A                     	;# 
    48  000B                     	;# 
    49  000C                     	;# 
    50  000E                     	;# 
    51  0011                     	;# 
    52  0012                     	;# 
    53  0013                     	;# 
    54  0015                     	;# 
    55  0016                     	;# 
    56  0016                     	;# 
    57  0017                     	;# 
    58  0018                     	;# 
    59  0019                     	;# 
    60  001A                     	;# 
    61  001B                     	;# 
    62  001C                     	;# 
    63  008C                     	;# 
    64  008E                     	;# 
    65  0091                     	;# 
    66  0092                     	;# 
    67  0093                     	;# 
    68  0095                     	;# 
    69  0096                     	;# 
    70  0097                     	;# 
    71  0099                     	;# 
    72  009A                     	;# 
    73  009B                     	;# 
    74  009B                     	;# 
    75  009C                     	;# 
    76  009D                     	;# 
    77  009E                     	;# 
    78  009F                     	;# 
    79  010C                     	;# 
    80  010E                     	;# 
    81  0111                     	;# 
    82  0112                     	;# 
    83  0113                     	;# 
    84  0114                     	;# 
    85  0115                     	;# 
    86  0116                     	;# 
    87  0117                     	;# 
    88  0118                     	;# 
    89  0119                     	;# 
    90  011D                     	;# 
    91  018C                     	;# 
    92  018E                     	;# 
    93  0191                     	;# 
    94  0191                     	;# 
    95  0192                     	;# 
    96  0193                     	;# 
    97  0193                     	;# 
    98  0194                     	;# 
    99  0195                     	;# 
   100  0196                     	;# 
   101  0197                     	;# 
   102  020C                     	;# 
   103  0211                     	;# 
   104  0211                     	;# 
   105  0212                     	;# 
   106  0212                     	;# 
   107  0213                     	;# 
   108  0213                     	;# 
   109  0214                     	;# 
   110  0214                     	;# 
   111  0215                     	;# 
   112  0215                     	;# 
   113  0215                     	;# 
   114  0216                     	;# 
   115  0216                     	;# 
   116  0217                     	;# 
   117  0217                     	;# 
   118  0391                     	;# 
   119  0392                     	;# 
   120  0393                     	;# 
   121  0498                     	;# 
   122  0498                     	;# 
   123  0499                     	;# 
   124  049A                     	;# 
   125  049B                     	;# 
   126  049B                     	;# 
   127  049C                     	;# 
   128  049D                     	;# 
   129  049E                     	;# 
   130  049F                     	;# 
   131  0611                     	;# 
   132  0612                     	;# 
   133  0613                     	;# 
   134  0613                     	;# 
   135  0614                     	;# 
   136  0615                     	;# 
   137  0616                     	;# 
   138  0616                     	;# 
   139  0617                     	;# 
   140  0618                     	;# 
   141  0619                     	;# 
   142  0619                     	;# 
   143  061A                     	;# 
   144  061B                     	;# 
   145  061C                     	;# 
   146  061C                     	;# 
   147  0691                     	;# 
   148  0692                     	;# 
   149  0693                     	;# 
   150  0694                     	;# 
   151  0695                     	;# 
   152  0F0F                     	;# 
   153  0F10                     	;# 
   154  0F11                     	;# 
   155  0F12                     	;# 
   156  0F13                     	;# 
   157  0F14                     	;# 
   158  0F15                     	;# 
   159  0F16                     	;# 
   160  0F17                     	;# 
   161  0F18                     	;# 
   162  0F19                     	;# 
   163  0F1A                     	;# 
   164  0F1B                     	;# 
   165  0F1C                     	;# 
   166  0F1D                     	;# 
   167  0F1E                     	;# 
   168  0F1F                     	;# 
   169  0FE3                     	;# 
   170  0FE4                     	;# 
   171  0FE5                     	;# 
   172  0FE6                     	;# 
   173  0FE7                     	;# 
   174  0FE8                     	;# 
   175  0FE9                     	;# 
   176  0FEA                     	;# 
   177  0FEB                     	;# 
   178  0FED                     	;# 
   179  0FEE                     	;# 
   180  0FEF                     	;# 
   181  0000                     	;# 
   182  0001                     	;# 
   183  0002                     	;# 
   184  0003                     	;# 
   185  0004                     	;# 
   186  0005                     	;# 
   187  0006                     	;# 
   188  0007                     	;# 
   189  0008                     	;# 
   190  0009                     	;# 
   191  000A                     	;# 
   192  000B                     	;# 
   193  000C                     	;# 
   194  000E                     	;# 
   195  0011                     	;# 
   196  0012                     	;# 
   197  0013                     	;# 
   198  0015                     	;# 
   199  0016                     	;# 
   200  0016                     	;# 
   201  0017                     	;# 
   202  0018                     	;# 
   203  0019                     	;# 
   204  001A                     	;# 
   205  001B                     	;# 
   206  001C                     	;# 
   207  008C                     	;# 
   208  008E                     	;# 
   209  0091                     	;# 
   210  0092                     	;# 
   211  0093                     	;# 
   212  0095                     	;# 
   213  0096                     	;# 
   214  0097                     	;# 
   215  0099                     	;# 
   216  009A                     	;# 
   217  009B                     	;# 
   218  009B                     	;# 
   219  009C                     	;# 
   220  009D                     	;# 
   221  009E                     	;# 
   222  009F                     	;# 
   223  010C                     	;# 
   224  010E                     	;# 
   225  0111                     	;# 
   226  0112                     	;# 
   227  0113                     	;# 
   228  0114                     	;# 
   229  0115                     	;# 
   230  0116                     	;# 
   231  0117                     	;# 
   232  0118                     	;# 
   233  0119                     	;# 
   234  011D                     	;# 
   235  018C                     	;# 
   236  018E                     	;# 
   237  0191                     	;# 
   238  0191                     	;# 
   239  0192                     	;# 
   240  0193                     	;# 
   241  0193                     	;# 
   242  0194                     	;# 
   243  0195                     	;# 
   244  0196                     	;# 
   245  0197                     	;# 
   246  020C                     	;# 
   247  0211                     	;# 
   248  0211                     	;# 
   249  0212                     	;# 
   250  0212                     	;# 
   251  0213                     	;# 
   252  0213                     	;# 
   253  0214                     	;# 
   254  0214                     	;# 
   255  0215                     	;# 
   256  0215                     	;# 
   257  0215                     	;# 
   258  0216                     	;# 
   259  0216                     	;# 
   260  0217                     	;# 
   261  0217                     	;# 
   262  0391                     	;# 
   263  0392                     	;# 
   264  0393                     	;# 
   265  0498                     	;# 
   266  0498                     	;# 
   267  0499                     	;# 
   268  049A                     	;# 
   269  049B                     	;# 
   270  049B                     	;# 
   271  049C                     	;# 
   272  049D                     	;# 
   273  049E                     	;# 
   274  049F                     	;# 
   275  0611                     	;# 
   276  0612                     	;# 
   277  0613                     	;# 
   278  0613                     	;# 
   279  0614                     	;# 
   280  0615                     	;# 
   281  0616                     	;# 
   282  0616                     	;# 
   283  0617                     	;# 
   284  0618                     	;# 
   285  0619                     	;# 
   286  0619                     	;# 
   287  061A                     	;# 
   288  061B                     	;# 
   289  061C                     	;# 
   290  061C                     	;# 
   291  0691                     	;# 
   292  0692                     	;# 
   293  0693                     	;# 
   294  0694                     	;# 
   295  0695                     	;# 
   296  0F0F                     	;# 
   297  0F10                     	;# 
   298  0F11                     	;# 
   299  0F12                     	;# 
   300  0F13                     	;# 
   301  0F14                     	;# 
   302  0F15                     	;# 
   303  0F16                     	;# 
   304  0F17                     	;# 
   305  0F18                     	;# 
   306  0F19                     	;# 
   307  0F1A                     	;# 
   308  0F1B                     	;# 
   309  0F1C                     	;# 
   310  0F1D                     	;# 
   311  0F1E                     	;# 
   312  0F1F                     	;# 
   313  0FE3                     	;# 
   314  0FE4                     	;# 
   315  0FE5                     	;# 
   316  0FE6                     	;# 
   317  0FE7                     	;# 
   318  0FE8                     	;# 
   319  0FE9                     	;# 
   320  0FEA                     	;# 
   321  0FEB                     	;# 
   322  0FED                     	;# 
   323  0FEE                     	;# 
   324  0FEF                     	;# 
   325  0000                     	;# 
   326  0001                     	;# 
   327  0002                     	;# 
   328  0003                     	;# 
   329  0004                     	;# 
   330  0005                     	;# 
   331  0006                     	;# 
   332  0007                     	;# 
   333  0008                     	;# 
   334  0009                     	;# 
   335  000A                     	;# 
   336  000B                     	;# 
   337  000C                     	;# 
   338  000E                     	;# 
   339  0011                     	;# 
   340  0012                     	;# 
   341  0013                     	;# 
   342  0015                     	;# 
   343  0016                     	;# 
   344  0016                     	;# 
   345  0017                     	;# 
   346  0018                     	;# 
   347  0019                     	;# 
   348  001A                     	;# 
   349  001B                     	;# 
   350  001C                     	;# 
   351  008C                     	;# 
   352  008E                     	;# 
   353  0091                     	;# 
   354  0092                     	;# 
   355  0093                     	;# 
   356  0095                     	;# 
   357  0096                     	;# 
   358  0097                     	;# 
   359  0099                     	;# 
   360  009A                     	;# 
   361  009B                     	;# 
   362  009B                     	;# 
   363  009C                     	;# 
   364  009D                     	;# 
   365  009E                     	;# 
   366  009F                     	;# 
   367  010C                     	;# 
   368  010E                     	;# 
   369  0111                     	;# 
   370  0112                     	;# 
   371  0113                     	;# 
   372  0114                     	;# 
   373  0115                     	;# 
   374  0116                     	;# 
   375  0117                     	;# 
   376  0118                     	;# 
   377  0119                     	;# 
   378  011D                     	;# 
   379  018C                     	;# 
   380  018E                     	;# 
   381  0191                     	;# 
   382  0191                     	;# 
   383  0192                     	;# 
   384  0193                     	;# 
   385  0193                     	;# 
   386  0194                     	;# 
   387  0195                     	;# 
   388  0196                     	;# 
   389  0197                     	;# 
   390  020C                     	;# 
   391  0211                     	;# 
   392  0211                     	;# 
   393  0212                     	;# 
   394  0212                     	;# 
   395  0213                     	;# 
   396  0213                     	;# 
   397  0214                     	;# 
   398  0214                     	;# 
   399  0215                     	;# 
   400  0215                     	;# 
   401  0215                     	;# 
   402  0216                     	;# 
   403  0216                     	;# 
   404  0217                     	;# 
   405  0217                     	;# 
   406  0391                     	;# 
   407  0392                     	;# 
   408  0393                     	;# 
   409  0498                     	;# 
   410  0498                     	;# 
   411  0499                     	;# 
   412  049A                     	;# 
   413  049B                     	;# 
   414  049B                     	;# 
   415  049C                     	;# 
   416  049D                     	;# 
   417  049E                     	;# 
   418  049F                     	;# 
   419  0611                     	;# 
   420  0612                     	;# 
   421  0613                     	;# 
   422  0613                     	;# 
   423  0614                     	;# 
   424  0615                     	;# 
   425  0616                     	;# 
   426  0616                     	;# 
   427  0617                     	;# 
   428  0618                     	;# 
   429  0619                     	;# 
   430  0619                     	;# 
   431  061A                     	;# 
   432  061B                     	;# 
   433  061C                     	;# 
   434  061C                     	;# 
   435  0691                     	;# 
   436  0692                     	;# 
   437  0693                     	;# 
   438  0694                     	;# 
   439  0695                     	;# 
   440  0F0F                     	;# 
   441  0F10                     	;# 
   442  0F11                     	;# 
   443  0F12                     	;# 
   444  0F13                     	;# 
   445  0F14                     	;# 
   446  0F15                     	;# 
   447  0F16                     	;# 
   448  0F17                     	;# 
   449  0F18                     	;# 
   450  0F19                     	;# 
   451  0F1A                     	;# 
   452  0F1B                     	;# 
   453  0F1C                     	;# 
   454  0F1D                     	;# 
   455  0F1E                     	;# 
   456  0F1F                     	;# 
   457  0FE3                     	;# 
   458  0FE4                     	;# 
   459  0FE5                     	;# 
   460  0FE6                     	;# 
   461  0FE7                     	;# 
   462  0FE8                     	;# 
   463  0FE9                     	;# 
   464  0FEA                     	;# 
   465  0FEB                     	;# 
   466  0FED                     	;# 
   467  0FEE                     	;# 
   468  0FEF                     	;# 
   469  0000                     	;# 
   470  0001                     	;# 
   471  0002                     	;# 
   472  0003                     	;# 
   473  0004                     	;# 
   474  0005                     	;# 
   475  0006                     	;# 
   476  0007                     	;# 
   477  0008                     	;# 
   478  0009                     	;# 
   479  000A                     	;# 
   480  000B                     	;# 
   481  000C                     	;# 
   482  000E                     	;# 
   483  0011                     	;# 
   484  0012                     	;# 
   485  0013                     	;# 
   486  0015                     	;# 
   487  0016                     	;# 
   488  0016                     	;# 
   489  0017                     	;# 
   490  0018                     	;# 
   491  0019                     	;# 
   492  001A                     	;# 
   493  001B                     	;# 
   494  001C                     	;# 
   495  008C                     	;# 
   496  008E                     	;# 
   497  0091                     	;# 
   498  0092                     	;# 
   499  0093                     	;# 
   500  0095                     	;# 
   501  0096                     	;# 
   502  0097                     	;# 
   503  0099                     	;# 
   504  009A                     	;# 
   505  009B                     	;# 
   506  009B                     	;# 
   507  009C                     	;# 
   508  009D                     	;# 
   509  009E                     	;# 
   510  009F                     	;# 
   511  010C                     	;# 
   512  010E                     	;# 
   513  0111                     	;# 
   514  0112                     	;# 
   515  0113                     	;# 
   516  0114                     	;# 
   517  0115                     	;# 
   518  0116                     	;# 
   519  0117                     	;# 
   520  0118                     	;# 
   521  0119                     	;# 
   522  011D                     	;# 
   523  018C                     	;# 
   524  018E                     	;# 
   525  0191                     	;# 
   526  0191                     	;# 
   527  0192                     	;# 
   528  0193                     	;# 
   529  0193                     	;# 
   530  0194                     	;# 
   531  0195                     	;# 
   532  0196                     	;# 
   533  0197                     	;# 
   534  020C                     	;# 
   535  0211                     	;# 
   536  0211                     	;# 
   537  0212                     	;# 
   538  0212                     	;# 
   539  0213                     	;# 
   540  0213                     	;# 
   541  0214                     	;# 
   542  0214                     	;# 
   543  0215                     	;# 
   544  0215                     	;# 
   545  0215                     	;# 
   546  0216                     	;# 
   547  0216                     	;# 
   548  0217                     	;# 
   549  0217                     	;# 
   550  0391                     	;# 
   551  0392                     	;# 
   552  0393                     	;# 
   553  0498                     	;# 
   554  0498                     	;# 
   555  0499                     	;# 
   556  049A                     	;# 
   557  049B                     	;# 
   558  049B                     	;# 
   559  049C                     	;# 
   560  049D                     	;# 
   561  049E                     	;# 
   562  049F                     	;# 
   563  0611                     	;# 
   564  0612                     	;# 
   565  0613                     	;# 
   566  0613                     	;# 
   567  0614                     	;# 
   568  0615                     	;# 
   569  0616                     	;# 
   570  0616                     	;# 
   571  0617                     	;# 
   572  0618                     	;# 
   573  0619                     	;# 
   574  0619                     	;# 
   575  061A                     	;# 
   576  061B                     	;# 
   577  061C                     	;# 
   578  061C                     	;# 
   579  0691                     	;# 
   580  0692                     	;# 
   581  0693                     	;# 
   582  0694                     	;# 
   583  0695                     	;# 
   584  0F0F                     	;# 
   585  0F10                     	;# 
   586  0F11                     	;# 
   587  0F12                     	;# 
   588  0F13                     	;# 
   589  0F14                     	;# 
   590  0F15                     	;# 
   591  0F16                     	;# 
   592  0F17                     	;# 
   593  0F18                     	;# 
   594  0F19                     	;# 
   595  0F1A                     	;# 
   596  0F1B                     	;# 
   597  0F1C                     	;# 
   598  0F1D                     	;# 
   599  0F1E                     	;# 
   600  0F1F                     	;# 
   601  0FE3                     	;# 
   602  0FE4                     	;# 
   603  0FE5                     	;# 
   604  0FE6                     	;# 
   605  0FE7                     	;# 
   606  0FE8                     	;# 
   607  0FE9                     	;# 
   608  0FEA                     	;# 
   609  0FEB                     	;# 
   610  0FED                     	;# 
   611  0FEE                     	;# 
   612  0FEF                     	;# 
   613  0000                     	;# 
   614  0001                     	;# 
   615  0002                     	;# 
   616  0003                     	;# 
   617  0004                     	;# 
   618  0005                     	;# 
   619  0006                     	;# 
   620  0007                     	;# 
   621  0008                     	;# 
   622  0009                     	;# 
   623  000A                     	;# 
   624  000B                     	;# 
   625  000C                     	;# 
   626  000E                     	;# 
   627  0011                     	;# 
   628  0012                     	;# 
   629  0013                     	;# 
   630  0015                     	;# 
   631  0016                     	;# 
   632  0016                     	;# 
   633  0017                     	;# 
   634  0018                     	;# 
   635  0019                     	;# 
   636  001A                     	;# 
   637  001B                     	;# 
   638  001C                     	;# 
   639  008C                     	;# 
   640  008E                     	;# 
   641  0091                     	;# 
   642  0092                     	;# 
   643  0093                     	;# 
   644  0095                     	;# 
   645  0096                     	;# 
   646  0097                     	;# 
   647  0099                     	;# 
   648  009A                     	;# 
   649  009B                     	;# 
   650  009B                     	;# 
   651  009C                     	;# 
   652  009D                     	;# 
   653  009E                     	;# 
   654  009F                     	;# 
   655  010C                     	;# 
   656  010E                     	;# 
   657  0111                     	;# 
   658  0112                     	;# 
   659  0113                     	;# 
   660  0114                     	;# 
   661  0115                     	;# 
   662  0116                     	;# 
   663  0117                     	;# 
   664  0118                     	;# 
   665  0119                     	;# 
   666  011D                     	;# 
   667  018C                     	;# 
   668  018E                     	;# 
   669  0191                     	;# 
   670  0191                     	;# 
   671  0192                     	;# 
   672  0193                     	;# 
   673  0193                     	;# 
   674  0194                     	;# 
   675  0195                     	;# 
   676  0196                     	;# 
   677  0197                     	;# 
   678  020C                     	;# 
   679  0211                     	;# 
   680  0211                     	;# 
   681  0212                     	;# 
   682  0212                     	;# 
   683  0213                     	;# 
   684  0213                     	;# 
   685  0214                     	;# 
   686  0214                     	;# 
   687  0215                     	;# 
   688  0215                     	;# 
   689  0215                     	;# 
   690  0216                     	;# 
   691  0216                     	;# 
   692  0217                     	;# 
   693  0217                     	;# 
   694  0391                     	;# 
   695  0392                     	;# 
   696  0393                     	;# 
   697  0498                     	;# 
   698  0498                     	;# 
   699  0499                     	;# 
   700  049A                     	;# 
   701  049B                     	;# 
   702  049B                     	;# 
   703  049C                     	;# 
   704  049D                     	;# 
   705  049E                     	;# 
   706  049F                     	;# 
   707  0611                     	;# 
   708  0612                     	;# 
   709  0613                     	;# 
   710  0613                     	;# 
   711  0614                     	;# 
   712  0615                     	;# 
   713  0616                     	;# 
   714  0616                     	;# 
   715  0617                     	;# 
   716  0618                     	;# 
   717  0619                     	;# 
   718  0619                     	;# 
   719  061A                     	;# 
   720  061B                     	;# 
   721  061C                     	;# 
   722  061C                     	;# 
   723  0691                     	;# 
   724  0692                     	;# 
   725  0693                     	;# 
   726  0694                     	;# 
   727  0695                     	;# 
   728  0F0F                     	;# 
   729  0F10                     	;# 
   730  0F11                     	;# 
   731  0F12                     	;# 
   732  0F13                     	;# 
   733  0F14                     	;# 
   734  0F15                     	;# 
   735  0F16                     	;# 
   736  0F17                     	;# 
   737  0F18                     	;# 
   738  0F19                     	;# 
   739  0F1A                     	;# 
   740  0F1B                     	;# 
   741  0F1C                     	;# 
   742  0F1D                     	;# 
   743  0F1E                     	;# 
   744  0F1F                     	;# 
   745  0FE3                     	;# 
   746  0FE4                     	;# 
   747  0FE5                     	;# 
   748  0FE6                     	;# 
   749  0FE7                     	;# 
   750  0FE8                     	;# 
   751  0FE9                     	;# 
   752  0FEA                     	;# 
   753  0FEB                     	;# 
   754  0FED                     	;# 
   755  0FEE                     	;# 
   756  0FEF                     	;# 
   757  0000                     	;# 
   758  0001                     	;# 
   759  0002                     	;# 
   760  0003                     	;# 
   761  0004                     	;# 
   762  0005                     	;# 
   763  0006                     	;# 
   764  0007                     	;# 
   765  0008                     	;# 
   766  0009                     	;# 
   767  000A                     	;# 
   768  000B                     	;# 
   769  000C                     	;# 
   770  000E                     	;# 
   771  0011                     	;# 
   772  0012                     	;# 
   773  0013                     	;# 
   774  0015                     	;# 
   775  0016                     	;# 
   776  0016                     	;# 
   777  0017                     	;# 
   778  0018                     	;# 
   779  0019                     	;# 
   780  001A                     	;# 
   781  001B                     	;# 
   782  001C                     	;# 
   783  008C                     	;# 
   784  008E                     	;# 
   785  0091                     	;# 
   786  0092                     	;# 
   787  0093                     	;# 
   788  0095                     	;# 
   789  0096                     	;# 
   790  0097                     	;# 
   791  0099                     	;# 
   792  009A                     	;# 
   793  009B                     	;# 
   794  009B                     	;# 
   795  009C                     	;# 
   796  009D                     	;# 
   797  009E                     	;# 
   798  009F                     	;# 
   799  010C                     	;# 
   800  010E                     	;# 
   801  0111                     	;# 
   802  0112                     	;# 
   803  0113                     	;# 
   804  0114                     	;# 
   805  0115                     	;# 
   806  0116                     	;# 
   807  0117                     	;# 
   808  0118                     	;# 
   809  0119                     	;# 
   810  011D                     	;# 
   811  018C                     	;# 
   812  018E                     	;# 
   813  0191                     	;# 
   814  0191                     	;# 
   815  0192                     	;# 
   816  0193                     	;# 
   817  0193                     	;# 
   818  0194                     	;# 
   819  0195                     	;# 
   820  0196                     	;# 
   821  0197                     	;# 
   822  020C                     	;# 
   823  0211                     	;# 
   824  0211                     	;# 
   825  0212                     	;# 
   826  0212                     	;# 
   827  0213                     	;# 
   828  0213                     	;# 
   829  0214                     	;# 
   830  0214                     	;# 
   831  0215                     	;# 
   832  0215                     	;# 
   833  0215                     	;# 
   834  0216                     	;# 
   835  0216                     	;# 
   836  0217                     	;# 
   837  0217                     	;# 
   838  0391                     	;# 
   839  0392                     	;# 
   840  0393                     	;# 
   841  0498                     	;# 
   842  0498                     	;# 
   843  0499                     	;# 
   844  049A                     	;# 
   845  049B                     	;# 
   846  049B                     	;# 
   847  049C                     	;# 
   848  049D                     	;# 
   849  049E                     	;# 
   850  049F                     	;# 
   851  0611                     	;# 
   852  0612                     	;# 
   853  0613                     	;# 
   854  0613                     	;# 
   855  0614                     	;# 
   856  0615                     	;# 
   857  0616                     	;# 
   858  0616                     	;# 
   859  0617                     	;# 
   860  0618                     	;# 
   861  0619                     	;# 
   862  0619                     	;# 
   863  061A                     	;# 
   864  061B                     	;# 
   865  061C                     	;# 
   866  061C                     	;# 
   867  0691                     	;# 
   868  0692                     	;# 
   869  0693                     	;# 
   870  0694                     	;# 
   871  0695                     	;# 
   872  0F0F                     	;# 
   873  0F10                     	;# 
   874  0F11                     	;# 
   875  0F12                     	;# 
   876  0F13                     	;# 
   877  0F14                     	;# 
   878  0F15                     	;# 
   879  0F16                     	;# 
   880  0F17                     	;# 
   881  0F18                     	;# 
   882  0F19                     	;# 
   883  0F1A                     	;# 
   884  0F1B                     	;# 
   885  0F1C                     	;# 
   886  0F1D                     	;# 
   887  0F1E                     	;# 
   888  0F1F                     	;# 
   889  0FE3                     	;# 
   890  0FE4                     	;# 
   891  0FE5                     	;# 
   892  0FE6                     	;# 
   893  0FE7                     	;# 
   894  0FE8                     	;# 
   895  0FE9                     	;# 
   896  0FEA                     	;# 
   897  0FEB                     	;# 
   898  0FED                     	;# 
   899  0FEE                     	;# 
   900  0FEF                     	;# 
   901  0000                     	;# 
   902  0001                     	;# 
   903  0002                     	;# 
   904  0003                     	;# 
   905  0004                     	;# 
   906  0005                     	;# 
   907  0006                     	;# 
   908  0007                     	;# 
   909  0008                     	;# 
   910  0009                     	;# 
   911  000A                     	;# 
   912  000B                     	;# 
   913  000C                     	;# 
   914  000E                     	;# 
   915  0011                     	;# 
   916  0012                     	;# 
   917  0013                     	;# 
   918  0015                     	;# 
   919  0016                     	;# 
   920  0016                     	;# 
   921  0017                     	;# 
   922  0018                     	;# 
   923  0019                     	;# 
   924  001A                     	;# 
   925  001B                     	;# 
   926  001C                     	;# 
   927  008C                     	;# 
   928  008E                     	;# 
   929  0091                     	;# 
   930  0092                     	;# 
   931  0093                     	;# 
   932  0095                     	;# 
   933  0096                     	;# 
   934  0097                     	;# 
   935  0099                     	;# 
   936  009A                     	;# 
   937  009B                     	;# 
   938  009B                     	;# 
   939  009C                     	;# 
   940  009D                     	;# 
   941  009E                     	;# 
   942  009F                     	;# 
   943  010C                     	;# 
   944  010E                     	;# 
   945  0111                     	;# 
   946  0112                     	;# 
   947  0113                     	;# 
   948  0114                     	;# 
   949  0115                     	;# 
   950  0116                     	;# 
   951  0117                     	;# 
   952  0118                     	;# 
   953  0119                     	;# 
   954  011D                     	;# 
   955  018C                     	;# 
   956  018E                     	;# 
   957  0191                     	;# 
   958  0191                     	;# 
   959  0192                     	;# 
   960  0193                     	;# 
   961  0193                     	;# 
   962  0194                     	;# 
   963  0195                     	;# 
   964  0196                     	;# 
   965  0197                     	;# 
   966  020C                     	;# 
   967  0211                     	;# 
   968  0211                     	;# 
   969  0212                     	;# 
   970  0212                     	;# 
   971  0213                     	;# 
   972  0213                     	;# 
   973  0214                     	;# 
   974  0214                     	;# 
   975  0215                     	;# 
   976  0215                     	;# 
   977  0215                     	;# 
   978  0216                     	;# 
   979  0216                     	;# 
   980  0217                     	;# 
   981  0217                     	;# 
   982  0391                     	;# 
   983  0392                     	;# 
   984  0393                     	;# 
   985  0498                     	;# 
   986  0498                     	;# 
   987  0499                     	;# 
   988  049A                     	;# 
   989  049B                     	;# 
   990  049B                     	;# 
   991  049C                     	;# 
   992  049D                     	;# 
   993  049E                     	;# 
   994  049F                     	;# 
   995  0611                     	;# 
   996  0612                     	;# 
   997  0613                     	;# 
   998  0613                     	;# 
   999  0614                     	;# 
  1000  0615                     	;# 
  1001  0616                     	;# 
  1002  0616                     	;# 
  1003  0617                     	;# 
  1004  0618                     	;# 
  1005  0619                     	;# 
  1006  0619                     	;# 
  1007  061A                     	;# 
  1008  061B                     	;# 
  1009  061C                     	;# 
  1010  061C                     	;# 
  1011  0691                     	;# 
  1012  0692                     	;# 
  1013  0693                     	;# 
  1014  0694                     	;# 
  1015  0695                     	;# 
  1016  0F0F                     	;# 
  1017  0F10                     	;# 
  1018  0F11                     	;# 
  1019  0F12                     	;# 
  1020  0F13                     	;# 
  1021  0F14                     	;# 
  1022  0F15                     	;# 
  1023  0F16                     	;# 
  1024  0F17                     	;# 
  1025  0F18                     	;# 
  1026  0F19                     	;# 
  1027  0F1A                     	;# 
  1028  0F1B                     	;# 
  1029  0F1C                     	;# 
  1030  0F1D                     	;# 
  1031  0F1E                     	;# 
  1032  0F1F                     	;# 
  1033  0FE3                     	;# 
  1034  0FE4                     	;# 
  1035  0FE5                     	;# 
  1036  0FE6                     	;# 
  1037  0FE7                     	;# 
  1038  0FE8                     	;# 
  1039  0FE9                     	;# 
  1040  0FEA                     	;# 
  1041  0FEB                     	;# 
  1042  0FED                     	;# 
  1043  0FEE                     	;# 
  1044  0FEF                     	;# 
  1045  0000                     	;# 
  1046  0001                     	;# 
  1047  0002                     	;# 
  1048  0003                     	;# 
  1049  0004                     	;# 
  1050  0005                     	;# 
  1051  0006                     	;# 
  1052  0007                     	;# 
  1053  0008                     	;# 
  1054  0009                     	;# 
  1055  000A                     	;# 
  1056  000B                     	;# 
  1057  000C                     	;# 
  1058  000E                     	;# 
  1059  0011                     	;# 
  1060  0012                     	;# 
  1061  0013                     	;# 
  1062  0015                     	;# 
  1063  0016                     	;# 
  1064  0016                     	;# 
  1065  0017                     	;# 
  1066  0018                     	;# 
  1067  0019                     	;# 
  1068  001A                     	;# 
  1069  001B                     	;# 
  1070  001C                     	;# 
  1071  008C                     	;# 
  1072  008E                     	;# 
  1073  0091                     	;# 
  1074  0092                     	;# 
  1075  0093                     	;# 
  1076  0095                     	;# 
  1077  0096                     	;# 
  1078  0097                     	;# 
  1079  0099                     	;# 
  1080  009A                     	;# 
  1081  009B                     	;# 
  1082  009B                     	;# 
  1083  009C                     	;# 
  1084  009D                     	;# 
  1085  009E                     	;# 
  1086  009F                     	;# 
  1087  010C                     	;# 
  1088  010E                     	;# 
  1089  0111                     	;# 
  1090  0112                     	;# 
  1091  0113                     	;# 
  1092  0114                     	;# 
  1093  0115                     	;# 
  1094  0116                     	;# 
  1095  0117                     	;# 
  1096  0118                     	;# 
  1097  0119                     	;# 
  1098  011D                     	;# 
  1099  018C                     	;# 
  1100  018E                     	;# 
  1101  0191                     	;# 
  1102  0191                     	;# 
  1103  0192                     	;# 
  1104  0193                     	;# 
  1105  0193                     	;# 
  1106  0194                     	;# 
  1107  0195                     	;# 
  1108  0196                     	;# 
  1109  0197                     	;# 
  1110  020C                     	;# 
  1111  0211                     	;# 
  1112  0211                     	;# 
  1113  0212                     	;# 
  1114  0212                     	;# 
  1115  0213                     	;# 
  1116  0213                     	;# 
  1117  0214                     	;# 
  1118  0214                     	;# 
  1119  0215                     	;# 
  1120  0215                     	;# 
  1121  0215                     	;# 
  1122  0216                     	;# 
  1123  0216                     	;# 
  1124  0217                     	;# 
  1125  0217                     	;# 
  1126  0391                     	;# 
  1127  0392                     	;# 
  1128  0393                     	;# 
  1129  0498                     	;# 
  1130  0498                     	;# 
  1131  0499                     	;# 
  1132  049A                     	;# 
  1133  049B                     	;# 
  1134  049B                     	;# 
  1135  049C                     	;# 
  1136  049D                     	;# 
  1137  049E                     	;# 
  1138  049F                     	;# 
  1139  0611                     	;# 
  1140  0612                     	;# 
  1141  0613                     	;# 
  1142  0613                     	;# 
  1143  0614                     	;# 
  1144  0615                     	;# 
  1145  0616                     	;# 
  1146  0616                     	;# 
  1147  0617                     	;# 
  1148  0618                     	;# 
  1149  0619                     	;# 
  1150  0619                     	;# 
  1151  061A                     	;# 
  1152  061B                     	;# 
  1153  061C                     	;# 
  1154  061C                     	;# 
  1155  0691                     	;# 
  1156  0692                     	;# 
  1157  0693                     	;# 
  1158  0694                     	;# 
  1159  0695                     	;# 
  1160  0F0F                     	;# 
  1161  0F10                     	;# 
  1162  0F11                     	;# 
  1163  0F12                     	;# 
  1164  0F13                     	;# 
  1165  0F14                     	;# 
  1166  0F15                     	;# 
  1167  0F16                     	;# 
  1168  0F17                     	;# 
  1169  0F18                     	;# 
  1170  0F19                     	;# 
  1171  0F1A                     	;# 
  1172  0F1B                     	;# 
  1173  0F1C                     	;# 
  1174  0F1D                     	;# 
  1175  0F1E                     	;# 
  1176  0F1F                     	;# 
  1177  0FE3                     	;# 
  1178  0FE4                     	;# 
  1179  0FE5                     	;# 
  1180  0FE6                     	;# 
  1181  0FE7                     	;# 
  1182  0FE8                     	;# 
  1183  0FE9                     	;# 
  1184  0FEA                     	;# 
  1185  0FEB                     	;# 
  1186  0FED                     	;# 
  1187  0FEE                     	;# 
  1188  0FEF                     	;# 
  1189  0000                     	;# 
  1190  0001                     	;# 
  1191  0002                     	;# 
  1192  0003                     	;# 
  1193  0004                     	;# 
  1194  0005                     	;# 
  1195  0006                     	;# 
  1196  0007                     	;# 
  1197  0008                     	;# 
  1198  0009                     	;# 
  1199  000A                     	;# 
  1200  000B                     	;# 
  1201  000C                     	;# 
  1202  000E                     	;# 
  1203  0011                     	;# 
  1204  0012                     	;# 
  1205  0013                     	;# 
  1206  0015                     	;# 
  1207  0016                     	;# 
  1208  0016                     	;# 
  1209  0017                     	;# 
  1210  0018                     	;# 
  1211  0019                     	;# 
  1212  001A                     	;# 
  1213  001B                     	;# 
  1214  001C                     	;# 
  1215  008C                     	;# 
  1216  008E                     	;# 
  1217  0091                     	;# 
  1218  0092                     	;# 
  1219  0093                     	;# 
  1220  0095                     	;# 
  1221  0096                     	;# 
  1222  0097                     	;# 
  1223  0099                     	;# 
  1224  009A                     	;# 
  1225  009B                     	;# 
  1226  009B                     	;# 
  1227  009C                     	;# 
  1228  009D                     	;# 
  1229  009E                     	;# 
  1230  009F                     	;# 
  1231  010C                     	;# 
  1232  010E                     	;# 
  1233  0111                     	;# 
  1234  0112                     	;# 
  1235  0113                     	;# 
  1236  0114                     	;# 
  1237  0115                     	;# 
  1238  0116                     	;# 
  1239  0117                     	;# 
  1240  0118                     	;# 
  1241  0119                     	;# 
  1242  011D                     	;# 
  1243  018C                     	;# 
  1244  018E                     	;# 
  1245  0191                     	;# 
  1246  0191                     	;# 
  1247  0192                     	;# 
  1248  0193                     	;# 
  1249  0193                     	;# 
  1250  0194                     	;# 
  1251  0195                     	;# 
  1252  0196                     	;# 
  1253  0197                     	;# 
  1254  020C                     	;# 
  1255  0211                     	;# 
  1256  0211                     	;# 
  1257  0212                     	;# 
  1258  0212                     	;# 
  1259  0213                     	;# 
  1260  0213                     	;# 
  1261  0214                     	;# 
  1262  0214                     	;# 
  1263  0215                     	;# 
  1264  0215                     	;# 
  1265  0215                     	;# 
  1266  0216                     	;# 
  1267  0216                     	;# 
  1268  0217                     	;# 
  1269  0217                     	;# 
  1270  0391                     	;# 
  1271  0392                     	;# 
  1272  0393                     	;# 
  1273  0498                     	;# 
  1274  0498                     	;# 
  1275  0499                     	;# 
  1276  049A                     	;# 
  1277  049B                     	;# 
  1278  049B                     	;# 
  1279  049C                     	;# 
  1280  049D                     	;# 
  1281  049E                     	;# 
  1282  049F                     	;# 
  1283  0611                     	;# 
  1284  0612                     	;# 
  1285  0613                     	;# 
  1286  0613                     	;# 
  1287  0614                     	;# 
  1288  0615                     	;# 
  1289  0616                     	;# 
  1290  0616                     	;# 
  1291  0617                     	;# 
  1292  0618                     	;# 
  1293  0619                     	;# 
  1294  0619                     	;# 
  1295  061A                     	;# 
  1296  061B                     	;# 
  1297  061C                     	;# 
  1298  061C                     	;# 
  1299  0691                     	;# 
  1300  0692                     	;# 
  1301  0693                     	;# 
  1302  0694                     	;# 
  1303  0695                     	;# 
  1304  0F0F                     	;# 
  1305  0F10                     	;# 
  1306  0F11                     	;# 
  1307  0F12                     	;# 
  1308  0F13                     	;# 
  1309  0F14                     	;# 
  1310  0F15                     	;# 
  1311  0F16                     	;# 
  1312  0F17                     	;# 
  1313  0F18                     	;# 
  1314  0F19                     	;# 
  1315  0F1A                     	;# 
  1316  0F1B                     	;# 
  1317  0F1C                     	;# 
  1318  0F1D                     	;# 
  1319  0F1E                     	;# 
  1320  0F1F                     	;# 
  1321  0FE3                     	;# 
  1322  0FE4                     	;# 
  1323  0FE5                     	;# 
  1324  0FE6                     	;# 
  1325  0FE7                     	;# 
  1326  0FE8                     	;# 
  1327  0FE9                     	;# 
  1328  0FEA                     	;# 
  1329  0FEB                     	;# 
  1330  0FED                     	;# 
  1331  0FEE                     	;# 
  1332  0FEF                     	;# 
  1333  0000                     	;# 
  1334  0001                     	;# 
  1335  0002                     	;# 
  1336  0003                     	;# 
  1337  0004                     	;# 
  1338  0005                     	;# 
  1339  0006                     	;# 
  1340  0007                     	;# 
  1341  0008                     	;# 
  1342  0009                     	;# 
  1343  000A                     	;# 
  1344  000B                     	;# 
  1345  000C                     	;# 
  1346  000E                     	;# 
  1347  0011                     	;# 
  1348  0012                     	;# 
  1349  0013                     	;# 
  1350  0015                     	;# 
  1351  0016                     	;# 
  1352  0016                     	;# 
  1353  0017                     	;# 
  1354  0018                     	;# 
  1355  0019                     	;# 
  1356  001A                     	;# 
  1357  001B                     	;# 
  1358  001C                     	;# 
  1359  008C                     	;# 
  1360  008E                     	;# 
  1361  0091                     	;# 
  1362  0092                     	;# 
  1363  0093                     	;# 
  1364  0095                     	;# 
  1365  0096                     	;# 
  1366  0097                     	;# 
  1367  0099                     	;# 
  1368  009A                     	;# 
  1369  009B                     	;# 
  1370  009B                     	;# 
  1371  009C                     	;# 
  1372  009D                     	;# 
  1373  009E                     	;# 
  1374  009F                     	;# 
  1375  010C                     	;# 
  1376  010E                     	;# 
  1377  0111                     	;# 
  1378  0112                     	;# 
  1379  0113                     	;# 
  1380  0114                     	;# 
  1381  0115                     	;# 
  1382  0116                     	;# 
  1383  0117                     	;# 
  1384  0118                     	;# 
  1385  0119                     	;# 
  1386  011D                     	;# 
  1387  018C                     	;# 
  1388  018E                     	;# 
  1389  0191                     	;# 
  1390  0191                     	;# 
  1391  0192                     	;# 
  1392  0193                     	;# 
  1393  0193                     	;# 
  1394  0194                     	;# 
  1395  0195                     	;# 
  1396  0196                     	;# 
  1397  0197                     	;# 
  1398  020C                     	;# 
  1399  0211                     	;# 
  1400  0211                     	;# 
  1401  0212                     	;# 
  1402  0212                     	;# 
  1403  0213                     	;# 
  1404  0213                     	;# 
  1405  0214                     	;# 
  1406  0214                     	;# 
  1407  0215                     	;# 
  1408  0215                     	;# 
  1409  0215                     	;# 
  1410  0216                     	;# 
  1411  0216                     	;# 
  1412  0217                     	;# 
  1413  0217                     	;# 
  1414  0391                     	;# 
  1415  0392                     	;# 
  1416  0393                     	;# 
  1417  0498                     	;# 
  1418  0498                     	;# 
  1419  0499                     	;# 
  1420  049A                     	;# 
  1421  049B                     	;# 
  1422  049B                     	;# 
  1423  049C                     	;# 
  1424  049D                     	;# 
  1425  049E                     	;# 
  1426  049F                     	;# 
  1427  0611                     	;# 
  1428  0612                     	;# 
  1429  0613                     	;# 
  1430  0613                     	;# 
  1431  0614                     	;# 
  1432  0615                     	;# 
  1433  0616                     	;# 
  1434  0616                     	;# 
  1435  0617                     	;# 
  1436  0618                     	;# 
  1437  0619                     	;# 
  1438  0619                     	;# 
  1439  061A                     	;# 
  1440  061B                     	;# 
  1441  061C                     	;# 
  1442  061C                     	;# 
  1443  0691                     	;# 
  1444  0692                     	;# 
  1445  0693                     	;# 
  1446  0694                     	;# 
  1447  0695                     	;# 
  1448  0F0F                     	;# 
  1449  0F10                     	;# 
  1450  0F11                     	;# 
  1451  0F12                     	;# 
  1452  0F13                     	;# 
  1453  0F14                     	;# 
  1454  0F15                     	;# 
  1455  0F16                     	;# 
  1456  0F17                     	;# 
  1457  0F18                     	;# 
  1458  0F19                     	;# 
  1459  0F1A                     	;# 
  1460  0F1B                     	;# 
  1461  0F1C                     	;# 
  1462  0F1D                     	;# 
  1463  0F1E                     	;# 
  1464  0F1F                     	;# 
  1465  0FE3                     	;# 
  1466  0FE4                     	;# 
  1467  0FE5                     	;# 
  1468  0FE6                     	;# 
  1469  0FE7                     	;# 
  1470  0FE8                     	;# 
  1471  0FE9                     	;# 
  1472  0FEA                     	;# 
  1473  0FEB                     	;# 
  1474  0FED                     	;# 
  1475  0FEE                     	;# 
  1476  0FEF                     	;# 
  1477                           
  1478                           	psect	idataBANK0
  1479  02F7                     __pidataBANK0:	
  1480                           
  1481                           ;initializer for _switch1_state
  1482  02F7  34FF               	retlw	255
  1483  02F8  34FF               	retlw	255
  1484                           
  1485                           ;initializer for _switch1_up
  1486  02F9  3401               	retlw	1
  1487  02FA  3400               	retlw	0
  1488                           
  1489                           ;initializer for _switch2_state
  1490  02FB  34FF               	retlw	255
  1491  02FC  34FF               	retlw	255
  1492                           
  1493                           ;initializer for _switch2_up
  1494  02FD  3401               	retlw	1
  1495  02FE  3400               	retlw	0
  1496  000B                     _INTCONbits	set	11
  1497  0011                     _PIR1bits	set	17
  1498  000C                     _PORTAbits	set	12
  1499  001C                     _T2CONbits	set	28
  1500  009D                     _ADCON0bits	set	157
  1501  009E                     _ADCON1bits	set	158
  1502  009C                     _ADRESH	set	156
  1503  009B                     _ADRESL	set	155
  1504  0099                     _OSCCONbits	set	153
  1505  009A                     _OSCSTAT	set	154
  1506  008C                     _TRISAbits	set	140
  1507  008E                     _TRISCbits	set	142
  1508  010C                     _LATAbits	set	268
  1509  010E                     _LATCbits	set	270
  1510  0191                     _PMADR	set	401
  1511  018C                     _ANSELAbits	set	396
  1512  0192                     _PMADRH	set	402
  1513  0191                     _PMADRL	set	401
  1514  0195                     _PMCON1bits	set	405
  1515  0196                     _PMCON2	set	406
  1516  0194                     _PMDATH	set	404
  1517  0193                     _PMDATL	set	403
  1518                           
  1519                           ; #config settings
  1520  0000                     
  1521                           	psect	cinit
  1522  000E                     start_initialization:	
  1523  000E                     __initialization:	
  1524                           
  1525                           ; Clear objects allocated to BANK0
  1526  000E  3020               	movlw	low __pbssBANK0
  1527  000F  0084               	movwf	4
  1528  0010  3000               	movlw	high __pbssBANK0
  1529  0011  0085               	movwf	5
  1530  0012  3012               	movlw	18
  1531  0013  230D               	fcall	clear_ram0
  1532                           
  1533                           ; Initialize objects allocated to BANK0
  1534  0014  30F7               	movlw	low __pidataBANK0
  1535  0015  0084               	movwf	4
  1536  0016  3082               	movlw	(high __pidataBANK0)| (0+128)
  1537  0017  0085               	movwf	5
  1538  0018  303B               	movlw	low __pdataBANK0
  1539  0019  0086               	movwf	6
  1540  001A  3000               	movlw	high __pdataBANK0
  1541  001B  0087               	movwf	7
  1542  001C  3008               	movlw	8
  1543  001D  2313               	fcall	init_ram
  1544  001E                     end_of_initialization:	
  1545                           ;End of C runtime variable initialization code
  1546                           
  1547  001E                     __end_of__initialization:	
  1548  001E  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  1549  001F  0020               	movlb	0
  1550  0020  2AFF               	ljmp	_main	;jump to C main() function
  1551                           
  1552                           	psect	bssBANK0
  1553  0020                     __pbssBANK0:	
  1554  0020                     wait_ms@timel:	
  1555  0020                     	ds	4
  1556  0024                     _isInitialized:	
  1557  0024                     	ds	2
  1558  0026                     _switch1_pressed:	
  1559  0026                     	ds	2
  1560  0028                     _switch1_toggle:	
  1561  0028                     	ds	2
  1562  002A                     _switch2_pressed:	
  1563  002A                     	ds	2
  1564  002C                     _switch2_toggle:	
  1565  002C                     	ds	2
  1566  002E                     _pedalState:	
  1567  002E                     	ds	4
  1568                           
  1569                           	psect	dataBANK0
  1570  003B                     __pdataBANK0:	
  1571  003B                     _switch1_state:	
  1572  003B                     	ds	2
  1573  003D                     _switch1_up:	
  1574  003D                     	ds	2
  1575  003F                     _switch2_state:	
  1576  003F                     	ds	2
  1577  0041                     _switch2_up:	
  1578  0041                     	ds	2
  1579                           
  1580                           	psect	clrtext
  1581  030D                     clear_ram0:	
  1582                           ;	Called with FSR0 containing the base address, and
  1583                           ;	WREG with the size to clear
  1584                           
  1585  030D  0064               	clrwdt	;clear the watchdog before getting into this loop
  1586  030E                     clrloop0:	
  1587  030E  0180               	clrf	0	;clear RAM location pointed to by FSR
  1588  030F  3101               	addfsr 0,1
  1589  0310  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1590  0311  2B0E               	goto	clrloop0	;have we reached the end yet?
  1591  0312  3400               	retlw	0	;all done for this memory range, return
  1592                           
  1593                           	psect	inittext
  1594  0313                     init_ram:	
  1595  0313  00FE               	movwf	126
  1596  0314                     initloop:	
  1597  0314  0012               	moviw fsr0++
  1598  0315  001E               	movwi fsr1++
  1599  0316  0BFE               	decfsz	126,f
  1600  0317  2B14               	goto	initloop
  1601  0318  3400               	retlw	0
  1602                           
  1603                           	psect	cstackCOMMON
  1604  0070                     __pcstackCOMMON:	
  1605  0070                     ?_ConfigureOscillator:	
  1606  0070                     ?_InitApp:	
  1607                           ; 1 bytes @ 0x0
  1608                           
  1609  0070                     ?_initSwitch1:	
  1610                           ; 1 bytes @ 0x0
  1611                           
  1612  0070                     ?_initSwitch2:	
  1613                           ; 1 bytes @ 0x0
  1614                           
  1615  0070                     ?_updateSwitch1:	
  1616                           ; 1 bytes @ 0x0
  1617                           
  1618  0070                     ?_updateSwitch2:	
  1619                           ; 1 bytes @ 0x0
  1620                           
  1621  0070                     ?_init_adc:	
  1622                           ; 1 bytes @ 0x0
  1623                           
  1624  0070                     ?_saveState:	
  1625                           ; 1 bytes @ 0x0
  1626                           
  1627  0070                     ?_isr:	
  1628                           ; 1 bytes @ 0x0
  1629                           
  1630  0070                     ??_isr:	
  1631                           ; 1 bytes @ 0x0
  1632                           
  1633  0070                     ?_main:	
  1634                           ; 1 bytes @ 0x0
  1635                           
  1636  0070                     ?_initStateManager:	
  1637                           ; 1 bytes @ 0x0
  1638                           
  1639  0070                     ?_getCurrentState:	
  1640                           ; 1 bytes @ 0x0
  1641                           
  1642                           
  1643                           ; 4 bytes @ 0x0
  1644  0070                     	ds	1
  1645  0071                     ?_FLASH_EraseBlock:	
  1646  0071                     ??_ConfigureOscillator:	
  1647                           ; 1 bytes @ 0x1
  1648                           
  1649  0071                     ??_InitApp:	
  1650                           ; 1 bytes @ 0x1
  1651                           
  1652  0071                     ??_init_adc:	
  1653                           ; 1 bytes @ 0x1
  1654                           
  1655  0071                     ?_FLASH_ReadWord:	
  1656                           ; 1 bytes @ 0x1
  1657                           
  1658  0071                     ?___lmul:	
  1659                           ; 2 bytes @ 0x1
  1660                           
  1661  0071                     FLASH_ReadWord@flashAddr:	
  1662                           ; 4 bytes @ 0x1
  1663                           
  1664  0071                     FLASH_EraseBlock@startAddr:	
  1665                           ; 2 bytes @ 0x1
  1666                           
  1667  0071                     ___lmul@multiplier:	
  1668                           ; 2 bytes @ 0x1
  1669                           
  1670                           
  1671                           ; 4 bytes @ 0x1
  1672  0071                     	ds	2
  1673  0073                     ??_FLASH_EraseBlock:	
  1674  0073                     ??_FLASH_ReadWord:	
  1675                           ; 1 bytes @ 0x3
  1676                           
  1677  0073                     FLASH_ReadWord@GIEBitValue:	
  1678                           ; 1 bytes @ 0x3
  1679                           
  1680  0073                     FLASH_EraseBlock@GIEBitValue:	
  1681                           ; 1 bytes @ 0x3
  1682                           
  1683                           
  1684                           ; 1 bytes @ 0x3
  1685  0073                     	ds	1
  1686  0074                     ?_HEF_ByteArrayWrite:	
  1687  0074                     ?_HEF_ByteArrayRead:	
  1688                           ; 1 bytes @ 0x4
  1689                           
  1690  0074                     HEF_ByteArrayWrite@byteArray:	
  1691                           ; 1 bytes @ 0x4
  1692                           
  1693  0074                     HEF_ByteArrayRead@block:	
  1694                           ; 1 bytes @ 0x4
  1695                           
  1696                           
  1697                           ; 1 bytes @ 0x4
  1698  0074                     	ds	1
  1699  0075                     HEF_ByteArrayWrite@count:	
  1700  0075                     HEF_ByteArrayRead@count:	
  1701                           ; 1 bytes @ 0x5
  1702                           
  1703  0075                     ___lmul@multiplicand:	
  1704                           ; 1 bytes @ 0x5
  1705                           
  1706                           
  1707                           ; 4 bytes @ 0x5
  1708  0075                     	ds	1
  1709  0076                     ??_HEF_ByteArrayWrite:	
  1710  0076                     ??_HEF_ByteArrayRead:	
  1711                           ; 1 bytes @ 0x6
  1712                           
  1713                           
  1714                           ; 1 bytes @ 0x6
  1715  0076                     	ds	2
  1716  0078                     HEF_ByteArrayWrite@GIEBitValue:	
  1717  0078                     HEF_ByteArrayRead@wordAdd:	
  1718                           ; 1 bytes @ 0x8
  1719                           
  1720                           
  1721                           ; 2 bytes @ 0x8
  1722  0078                     	ds	1
  1723  0079                     ??___lmul:	
  1724  0079                     HEF_ByteArrayWrite@block:	
  1725                           ; 1 bytes @ 0x9
  1726                           
  1727  0079                     ___lmul@product:	
  1728                           ; 1 bytes @ 0x9
  1729                           
  1730                           
  1731                           ; 4 bytes @ 0x9
  1732  0079                     	ds	1
  1733  007A                     HEF_ByteArrayRead@bArray:	
  1734  007A                     HEF_ByteArrayWrite@blockAddr:	
  1735                           ; 1 bytes @ 0xA
  1736                           
  1737                           
  1738                           ; 2 bytes @ 0xA
  1739  007A                     	ds	1
  1740  007B                     ??_getCurrentState:	
  1741                           
  1742                           ; 1 bytes @ 0xB
  1743  007B                     	ds	1
  1744  007C                     saveState@r:	
  1745                           
  1746                           ; 1 bytes @ 0xC
  1747  007C                     	ds	1
  1748  007D                     ??_initSwitch1:	
  1749  007D                     ??_initSwitch2:	
  1750                           ; 1 bytes @ 0xD
  1751                           
  1752  007D                     ??_setSwitch1State:	
  1753                           ; 1 bytes @ 0xD
  1754                           
  1755  007D                     ??_setSwitch2State:	
  1756                           ; 1 bytes @ 0xD
  1757                           
  1758  007D                     ??_main:	
  1759                           ; 1 bytes @ 0xD
  1760                           
  1761  007D                     ??_wait_ms:	
  1762                           ; 1 bytes @ 0xD
  1763                           
  1764  007D                     ??_initStateManager:	
  1765                           ; 1 bytes @ 0xD
  1766                           
  1767  007D                     ??_getSwitch1State:	
  1768                           ; 1 bytes @ 0xD
  1769                           
  1770  007D                     ??_getSwitch2State:	
  1771                           ; 1 bytes @ 0xD
  1772                           
  1773  007D                     ??_updateSwitch1State:	
  1774                           ; 1 bytes @ 0xD
  1775                           
  1776  007D                     ??_updateSwitch2State:	
  1777                           ; 1 bytes @ 0xD
  1778                           
  1779                           
  1780                           	psect	cstackBANK0
  1781  0032                     __pcstackBANK0:	
  1782                           ; 1 bytes @ 0xD
  1783                           
  1784  0032                     ??_saveState:	
  1785  0032                     ?_wait_ms:	
  1786                           ; 1 bytes @ 0x0
  1787                           
  1788  0032                     getCurrentState@r:	
  1789                           ; 1 bytes @ 0x0
  1790                           
  1791  0032                     wait_ms@time:	
  1792                           ; 1 bytes @ 0x0
  1793                           
  1794                           
  1795                           ; 2 bytes @ 0x0
  1796  0032                     	ds	1
  1797  0033                     ?_getSwitch1State:	
  1798  0033                     ?_getSwitch2State:	
  1799                           ; 2 bytes @ 0x1
  1800                           
  1801                           
  1802                           ; 2 bytes @ 0x1
  1803  0033                     	ds	2
  1804  0035                     ?_updateSwitch1State:	
  1805  0035                     ?_updateSwitch2State:	
  1806                           ; 1 bytes @ 0x3
  1807                           
  1808  0035                     updateSwitch1State@state:	
  1809                           ; 1 bytes @ 0x3
  1810                           
  1811  0035                     updateSwitch2State@state:	
  1812                           ; 2 bytes @ 0x3
  1813                           
  1814                           
  1815                           ; 2 bytes @ 0x3
  1816  0035                     	ds	2
  1817  0037                     ?_setSwitch1State:	
  1818  0037                     ?_setSwitch2State:	
  1819                           ; 1 bytes @ 0x5
  1820                           
  1821  0037                     setSwitch1State@f_state:	
  1822                           ; 1 bytes @ 0x5
  1823                           
  1824  0037                     setSwitch2State@f_state:	
  1825                           ; 2 bytes @ 0x5
  1826                           
  1827                           
  1828                           ; 2 bytes @ 0x5
  1829  0037                     	ds	2
  1830  0039                     ??_updateSwitch1:	
  1831  0039                     ??_updateSwitch2:	
  1832                           ; 1 bytes @ 0x7
  1833                           
  1834  0039                     initSwitch1@initState:	
  1835                           ; 1 bytes @ 0x7
  1836                           
  1837  0039                     initSwitch2@initState:	
  1838                           ; 2 bytes @ 0x7
  1839                           
  1840                           
  1841                           ; 2 bytes @ 0x7
  1842  0039                     	ds	2
  1843                           
  1844                           	psect	maintext
  1845  02FF                     __pmaintext:	
  1846 ;;
  1847 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1848 ;;
  1849 ;; *************** function _main *****************
  1850 ;; Defined at:
  1851 ;;		line 23 in file "main.c"
  1852 ;; Parameters:    Size  Location     Type
  1853 ;;		None
  1854 ;; Auto vars:     Size  Location     Type
  1855 ;;		None
  1856 ;; Return value:  Size  Location     Type
  1857 ;;                  1    wreg      void 
  1858 ;; Registers used:
  1859 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1860 ;; Tracked objects:
  1861 ;;		On entry : B1F/0
  1862 ;;		On exit  : 0/0
  1863 ;;		Unchanged: 0/0
  1864 ;; Data sizes:     COMMON   BANK0   BANK1
  1865 ;;      Params:         0       0       0
  1866 ;;      Locals:         0       0       0
  1867 ;;      Temps:          0       0       0
  1868 ;;      Totals:         0       0       0
  1869 ;;Total ram usage:        0 bytes
  1870 ;; Hardware stack levels required when called:    7
  1871 ;; This function calls:
  1872 ;;		_ConfigureOscillator
  1873 ;;		_InitApp
  1874 ;;		_initSwitch1
  1875 ;;		_initSwitch2
  1876 ;;		_updateSwitch1
  1877 ;;		_updateSwitch2
  1878 ;; This function is called by:
  1879 ;;		Startup code after reset
  1880 ;; This function uses a non-reentrant model
  1881 ;;
  1882                           
  1883                           
  1884                           ;psect for function _main
  1885  02FF                     _main:	
  1886                           
  1887                           ;main.c: 24: ConfigureOscillator();
  1888                           
  1889                           ;incstack = 0
  1890                           ; Regs used in _main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  1891  02FF  231E               	fcall	_ConfigureOscillator
  1892                           
  1893                           ;main.c: 25: InitApp();
  1894  0300  228A               	fcall	_InitApp
  1895                           
  1896                           ;main.c: 27: initSwitch1();
  1897  0301  22D5               	fcall	_initSwitch1
  1898                           
  1899                           ;main.c: 28: initSwitch2();
  1900  0302  22C9               	fcall	_initSwitch2
  1901  0303                     l1466:	
  1902                           ;main.c: 30: while (1) {
  1903                           
  1904                           
  1905                           ;main.c: 31: updateSwitch1();
  1906  0303  2081               	fcall	_updateSwitch1
  1907                           
  1908                           ;main.c: 32: updateSwitch2();
  1909  0304  2021               	fcall	_updateSwitch2
  1910  0305  2B03               	goto	l1466
  1911  0306                     __end_of_main:	
  1912                           
  1913                           	psect	text1
  1914  0021                     __ptext1:	
  1915 ;; *************** function _updateSwitch2 *****************
  1916 ;; Defined at:
  1917 ;;		line 27 in file "switch2.c"
  1918 ;; Parameters:    Size  Location     Type
  1919 ;;		None
  1920 ;; Auto vars:     Size  Location     Type
  1921 ;;		None
  1922 ;; Return value:  Size  Location     Type
  1923 ;;                  1    wreg      void 
  1924 ;; Registers used:
  1925 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1926 ;; Tracked objects:
  1927 ;;		On entry : 0/0
  1928 ;;		On exit  : 0/0
  1929 ;;		Unchanged: 0/0
  1930 ;; Data sizes:     COMMON   BANK0   BANK1
  1931 ;;      Params:         0       0       0
  1932 ;;      Locals:         0       0       0
  1933 ;;      Temps:          0       1       0
  1934 ;;      Totals:         0       1       0
  1935 ;;Total ram usage:        1 bytes
  1936 ;; Hardware stack levels used:    1
  1937 ;; Hardware stack levels required when called:    6
  1938 ;; This function calls:
  1939 ;;		_setSwitch2State
  1940 ;; This function is called by:
  1941 ;;		_main
  1942 ;; This function uses a non-reentrant model
  1943 ;;
  1944                           
  1945                           
  1946                           ;psect for function _updateSwitch2
  1947  0021                     _updateSwitch2:	
  1948                           
  1949                           ;switch2.c: 34: if (PORTAbits.RA4 == 0) {
  1950                           
  1951                           ;incstack = 0
  1952                           ; Regs used in _updateSwitch2: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  1953  0021  0020               	movlb	0	; select bank0
  1954  0022  1A0C               	btfsc	12,4	;volatile
  1955  0023  2834               	goto	l1364
  1956                           
  1957                           ;switch2.c: 35: if (switch2_pressed > 0) {
  1958  0024  082B               	movf	_switch2_pressed+1,w
  1959  0025  3A80               	xorlw	128
  1960  0026  00B9               	movwf	??_updateSwitch2
  1961  0027  3080               	movlw	128
  1962  0028  0239               	subwf	??_updateSwitch2,w
  1963  0029  1D03               	skipz
  1964  002A  282D               	goto	u865
  1965  002B  3001               	movlw	1
  1966  002C  022A               	subwf	_switch2_pressed,w
  1967  002D                     u865:	
  1968  002D  1C03               	skipc
  1969  002E  2844               	goto	l1368
  1970                           
  1971                           ;switch2.c: 36: switch2_pressed--;
  1972  002F  30FF               	movlw	255
  1973  0030  0020               	movlb	0	; select bank0
  1974  0031  07AA               	addwf	_switch2_pressed,f
  1975  0032  30FF               	movlw	255
  1976  0033  2843               	goto	L1
  1977  0034                     l1364:	
  1978                           ;switch2.c: 37: }
  1979                           ;switch2.c: 38: } else if (switch2_pressed < 25) {
  1980                           
  1981  0034  082B               	movf	_switch2_pressed+1,w
  1982  0035  3A80               	xorlw	128
  1983  0036  00B9               	movwf	??_updateSwitch2
  1984  0037  3080               	movlw	128
  1985  0038  0239               	subwf	??_updateSwitch2,w
  1986  0039  1D03               	skipz
  1987  003A  283D               	goto	u875
  1988  003B  3019               	movlw	25
  1989  003C  022A               	subwf	_switch2_pressed,w
  1990  003D                     u875:	
  1991  003D  1803               	skipnc
  1992  003E  2844               	goto	l1368
  1993                           
  1994                           ;switch2.c: 39: switch2_pressed++;
  1995  003F  3001               	movlw	1
  1996  0040  0020               	movlb	0	; select bank0
  1997  0041  07AA               	addwf	_switch2_pressed,f
  1998  0042  3000               	movlw	0
  1999  0043                     L1:	
  2000  0043  3DAB               	addwfc	_switch2_pressed+1,f
  2001  0044                     l1368:	
  2002                           
  2003                           ;switch2.c: 40: }
  2004                           ;switch2.c: 46: if (switch2_pressed == 0) {
  2005  0044  0020               	movlb	0	; select bank0
  2006  0045  082A               	movf	_switch2_pressed,w
  2007  0046  042B               	iorwf	_switch2_pressed+1,w
  2008  0047  1D03               	btfss	3,2
  2009  0048  2861               	goto	l1382
  2010                           
  2011                           ;switch2.c: 47: if (switch2_state == 1) {
  2012  0049  033F               	decf	_switch2_state,w
  2013  004A  0440               	iorwf	_switch2_state+1,w
  2014  004B  1D03               	btfss	3,2
  2015  004C  2856               	goto	l1376
  2016                           
  2017                           ;switch2.c: 48: if (switch2_up == 1) {
  2018  004D  0341               	decf	_switch2_up,w
  2019  004E  0442               	iorwf	_switch2_up+1,w
  2020  004F  1D03               	btfss	3,2
  2021  0050  285D               	goto	l1380
  2022                           
  2023                           ;switch2.c: 49: switch2_toggle = 1;
  2024  0051  3001               	movlw	1
  2025  0052  00AC               	movwf	_switch2_toggle
  2026  0053  3000               	movlw	0
  2027  0054  00AD               	movwf	_switch2_toggle+1
  2028                           
  2029                           ;switch2.c: 50: }
  2030                           ;switch2.c: 51: } else {
  2031  0055  285D               	goto	l1380
  2032  0056                     l1376:	
  2033                           
  2034                           ;switch2.c: 53: switch2_toggle = 0;
  2035  0056  01AC               	clrf	_switch2_toggle
  2036  0057  01AD               	clrf	_switch2_toggle+1
  2037                           
  2038                           ;switch2.c: 54: setSwitch2State(1);
  2039  0058  3001               	movlw	1
  2040  0059  00B7               	movwf	setSwitch2State@f_state
  2041  005A  3000               	movlw	0
  2042  005B  00B8               	movwf	setSwitch2State@f_state+1
  2043  005C  2134               	fcall	_setSwitch2State
  2044  005D                     l1380:	
  2045                           
  2046                           ;switch2.c: 55: }
  2047                           ;switch2.c: 58: switch2_up = 0;
  2048  005D  0020               	movlb	0	; select bank0
  2049  005E  01C1               	clrf	_switch2_up
  2050  005F  01C2               	clrf	_switch2_up+1
  2051                           
  2052                           ;switch2.c: 59: } else if (switch2_pressed >= 25) {
  2053  0060  0008               	return
  2054  0061                     l1382:	
  2055  0061  082B               	movf	_switch2_pressed+1,w
  2056  0062  3A80               	xorlw	128
  2057  0063  00B9               	movwf	??_updateSwitch2
  2058  0064  3080               	movlw	128
  2059  0065  0239               	subwf	??_updateSwitch2,w
  2060  0066  1D03               	skipz
  2061  0067  286A               	goto	u915
  2062  0068  3019               	movlw	25
  2063  0069  022A               	subwf	_switch2_pressed,w
  2064  006A                     u915:	
  2065  006A  1C03               	skipc
  2066  006B  0008               	return
  2067                           
  2068                           ;switch2.c: 60: if (switch2_toggle == 1) {
  2069  006C  0020               	movlb	0	; select bank0
  2070  006D  032C               	decf	_switch2_toggle,w
  2071  006E  042D               	iorwf	_switch2_toggle+1,w
  2072  006F  1D03               	btfss	3,2
  2073  0070  2875               	goto	l1388
  2074                           
  2075                           ;switch2.c: 61: setSwitch2State(0);
  2076  0071  3000               	movlw	0
  2077  0072  00B7               	movwf	setSwitch2State@f_state
  2078  0073  00B8               	movwf	setSwitch2State@f_state+1
  2079  0074  2134               	fcall	_setSwitch2State
  2080  0075                     l1388:	
  2081                           
  2082                           ;switch2.c: 62: }
  2083                           ;switch2.c: 63: switch2_toggle = 0;
  2084  0075  0020               	movlb	0	; select bank0
  2085  0076  01AC               	clrf	_switch2_toggle
  2086  0077  01AD               	clrf	_switch2_toggle+1
  2087                           
  2088                           ;switch2.c: 64: switch2_up = 1;
  2089  0078  3001               	movlw	1
  2090  0079  00C1               	movwf	_switch2_up
  2091  007A  3000               	movlw	0
  2092  007B  00C2               	movwf	_switch2_up+1
  2093                           
  2094                           ;switch2.c: 65: switch2_pressed = 25;
  2095  007C  3019               	movlw	25
  2096  007D  00AA               	movwf	_switch2_pressed
  2097  007E  3000               	movlw	0
  2098  007F  00AB               	movwf	_switch2_pressed+1
  2099  0080  0008               	return
  2100  0081                     __end_of_updateSwitch2:	
  2101                           
  2102                           	psect	text2
  2103  0081                     __ptext2:	
  2104 ;; *************** function _updateSwitch1 *****************
  2105 ;; Defined at:
  2106 ;;		line 27 in file "switch1.c"
  2107 ;; Parameters:    Size  Location     Type
  2108 ;;		None
  2109 ;; Auto vars:     Size  Location     Type
  2110 ;;		None
  2111 ;; Return value:  Size  Location     Type
  2112 ;;                  1    wreg      void 
  2113 ;; Registers used:
  2114 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2115 ;; Tracked objects:
  2116 ;;		On entry : 0/0
  2117 ;;		On exit  : 0/0
  2118 ;;		Unchanged: 0/0
  2119 ;; Data sizes:     COMMON   BANK0   BANK1
  2120 ;;      Params:         0       0       0
  2121 ;;      Locals:         0       0       0
  2122 ;;      Temps:          0       1       0
  2123 ;;      Totals:         0       1       0
  2124 ;;Total ram usage:        1 bytes
  2125 ;; Hardware stack levels used:    1
  2126 ;; Hardware stack levels required when called:    6
  2127 ;; This function calls:
  2128 ;;		_setSwitch1State
  2129 ;; This function is called by:
  2130 ;;		_main
  2131 ;; This function uses a non-reentrant model
  2132 ;;
  2133                           
  2134                           
  2135                           ;psect for function _updateSwitch1
  2136  0081                     _updateSwitch1:	
  2137                           
  2138                           ;switch1.c: 34: if (PORTAbits.RA5 == 0) {
  2139                           
  2140                           ;incstack = 0
  2141                           ; Regs used in _updateSwitch1: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2142  0081  0020               	movlb	0	; select bank0
  2143  0082  1A8C               	btfsc	12,5	;volatile
  2144  0083  2894               	goto	l1328
  2145                           
  2146                           ;switch1.c: 35: if (switch1_pressed > 0) {
  2147  0084  0827               	movf	_switch1_pressed+1,w
  2148  0085  3A80               	xorlw	128
  2149  0086  00B9               	movwf	??_updateSwitch1
  2150  0087  3080               	movlw	128
  2151  0088  0239               	subwf	??_updateSwitch1,w
  2152  0089  1D03               	skipz
  2153  008A  288D               	goto	u785
  2154  008B  3001               	movlw	1
  2155  008C  0226               	subwf	_switch1_pressed,w
  2156  008D                     u785:	
  2157  008D  1C03               	skipc
  2158  008E  28A4               	goto	l1332
  2159                           
  2160                           ;switch1.c: 36: switch1_pressed--;
  2161  008F  30FF               	movlw	255
  2162  0090  0020               	movlb	0	; select bank0
  2163  0091  07A6               	addwf	_switch1_pressed,f
  2164  0092  30FF               	movlw	255
  2165  0093  28A3               	goto	L2
  2166  0094                     l1328:	
  2167                           ;switch1.c: 37: }
  2168                           ;switch1.c: 38: } else if (switch1_pressed < 25) {
  2169                           
  2170  0094  0827               	movf	_switch1_pressed+1,w
  2171  0095  3A80               	xorlw	128
  2172  0096  00B9               	movwf	??_updateSwitch1
  2173  0097  3080               	movlw	128
  2174  0098  0239               	subwf	??_updateSwitch1,w
  2175  0099  1D03               	skipz
  2176  009A  289D               	goto	u795
  2177  009B  3019               	movlw	25
  2178  009C  0226               	subwf	_switch1_pressed,w
  2179  009D                     u795:	
  2180  009D  1803               	skipnc
  2181  009E  28A4               	goto	l1332
  2182                           
  2183                           ;switch1.c: 39: switch1_pressed++;
  2184  009F  3001               	movlw	1
  2185  00A0  0020               	movlb	0	; select bank0
  2186  00A1  07A6               	addwf	_switch1_pressed,f
  2187  00A2  3000               	movlw	0
  2188  00A3                     L2:	
  2189  00A3  3DA7               	addwfc	_switch1_pressed+1,f
  2190  00A4                     l1332:	
  2191                           
  2192                           ;switch1.c: 40: }
  2193                           ;switch1.c: 46: if (switch1_pressed == 0) {
  2194  00A4  0020               	movlb	0	; select bank0
  2195  00A5  0826               	movf	_switch1_pressed,w
  2196  00A6  0427               	iorwf	_switch1_pressed+1,w
  2197  00A7  1D03               	btfss	3,2
  2198  00A8  28C1               	goto	l1346
  2199                           
  2200                           ;switch1.c: 47: if (switch1_state == 1) {
  2201  00A9  033B               	decf	_switch1_state,w
  2202  00AA  043C               	iorwf	_switch1_state+1,w
  2203  00AB  1D03               	btfss	3,2
  2204  00AC  28B6               	goto	l1340
  2205                           
  2206                           ;switch1.c: 48: if (switch1_up == 1) {
  2207  00AD  033D               	decf	_switch1_up,w
  2208  00AE  043E               	iorwf	_switch1_up+1,w
  2209  00AF  1D03               	btfss	3,2
  2210  00B0  28BD               	goto	l1344
  2211                           
  2212                           ;switch1.c: 49: switch1_toggle = 1;
  2213  00B1  3001               	movlw	1
  2214  00B2  00A8               	movwf	_switch1_toggle
  2215  00B3  3000               	movlw	0
  2216  00B4  00A9               	movwf	_switch1_toggle+1
  2217                           
  2218                           ;switch1.c: 50: }
  2219                           ;switch1.c: 51: } else {
  2220  00B5  28BD               	goto	l1344
  2221  00B6                     l1340:	
  2222                           
  2223                           ;switch1.c: 53: switch1_toggle = 0;
  2224  00B6  01A8               	clrf	_switch1_toggle
  2225  00B7  01A9               	clrf	_switch1_toggle+1
  2226                           
  2227                           ;switch1.c: 54: setSwitch1State(1);
  2228  00B8  3001               	movlw	1
  2229  00B9  00B7               	movwf	setSwitch1State@f_state
  2230  00BA  3000               	movlw	0
  2231  00BB  00B8               	movwf	setSwitch1State@f_state+1
  2232  00BC  216E               	fcall	_setSwitch1State
  2233  00BD                     l1344:	
  2234                           
  2235                           ;switch1.c: 55: }
  2236                           ;switch1.c: 58: switch1_up = 0;
  2237  00BD  0020               	movlb	0	; select bank0
  2238  00BE  01BD               	clrf	_switch1_up
  2239  00BF  01BE               	clrf	_switch1_up+1
  2240                           
  2241                           ;switch1.c: 59: } else if (switch1_pressed >= 25) {
  2242  00C0  0008               	return
  2243  00C1                     l1346:	
  2244  00C1  0827               	movf	_switch1_pressed+1,w
  2245  00C2  3A80               	xorlw	128
  2246  00C3  00B9               	movwf	??_updateSwitch1
  2247  00C4  3080               	movlw	128
  2248  00C5  0239               	subwf	??_updateSwitch1,w
  2249  00C6  1D03               	skipz
  2250  00C7  28CA               	goto	u835
  2251  00C8  3019               	movlw	25
  2252  00C9  0226               	subwf	_switch1_pressed,w
  2253  00CA                     u835:	
  2254  00CA  1C03               	skipc
  2255  00CB  0008               	return
  2256                           
  2257                           ;switch1.c: 60: if (switch1_toggle == 1) {
  2258  00CC  0020               	movlb	0	; select bank0
  2259  00CD  0328               	decf	_switch1_toggle,w
  2260  00CE  0429               	iorwf	_switch1_toggle+1,w
  2261  00CF  1D03               	btfss	3,2
  2262  00D0  28D5               	goto	l1352
  2263                           
  2264                           ;switch1.c: 61: setSwitch1State(0);
  2265  00D1  3000               	movlw	0
  2266  00D2  00B7               	movwf	setSwitch1State@f_state
  2267  00D3  00B8               	movwf	setSwitch1State@f_state+1
  2268  00D4  216E               	fcall	_setSwitch1State
  2269  00D5                     l1352:	
  2270                           
  2271                           ;switch1.c: 62: }
  2272                           ;switch1.c: 63: switch1_toggle = 0;
  2273  00D5  0020               	movlb	0	; select bank0
  2274  00D6  01A8               	clrf	_switch1_toggle
  2275  00D7  01A9               	clrf	_switch1_toggle+1
  2276                           
  2277                           ;switch1.c: 64: switch1_up = 1;
  2278  00D8  3001               	movlw	1
  2279  00D9  00BD               	movwf	_switch1_up
  2280  00DA  3000               	movlw	0
  2281  00DB  00BE               	movwf	_switch1_up+1
  2282                           
  2283                           ;switch1.c: 65: switch1_pressed = 25;
  2284  00DC  3019               	movlw	25
  2285  00DD  00A6               	movwf	_switch1_pressed
  2286  00DE  3000               	movlw	0
  2287  00DF  00A7               	movwf	_switch1_pressed+1
  2288  00E0  0008               	return
  2289  00E1                     __end_of_updateSwitch1:	
  2290                           
  2291                           	psect	text3
  2292  02C9                     __ptext3:	
  2293 ;; *************** function _initSwitch2 *****************
  2294 ;; Defined at:
  2295 ;;		line 22 in file "switch2.c"
  2296 ;; Parameters:    Size  Location     Type
  2297 ;;		None
  2298 ;; Auto vars:     Size  Location     Type
  2299 ;;  initState       2    7[BANK0 ] int 
  2300 ;; Return value:  Size  Location     Type
  2301 ;;                  1    wreg      void 
  2302 ;; Registers used:
  2303 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2304 ;; Tracked objects:
  2305 ;;		On entry : 0/0
  2306 ;;		On exit  : 0/0
  2307 ;;		Unchanged: 0/0
  2308 ;; Data sizes:     COMMON   BANK0   BANK1
  2309 ;;      Params:         0       0       0
  2310 ;;      Locals:         0       2       0
  2311 ;;      Temps:          0       0       0
  2312 ;;      Totals:         0       2       0
  2313 ;;Total ram usage:        2 bytes
  2314 ;; Hardware stack levels used:    1
  2315 ;; Hardware stack levels required when called:    6
  2316 ;; This function calls:
  2317 ;;		_getSwitch2State
  2318 ;;		_setSwitch2State
  2319 ;; This function is called by:
  2320 ;;		_main
  2321 ;; This function uses a non-reentrant model
  2322 ;;
  2323                           
  2324                           
  2325                           ;psect for function _initSwitch2
  2326  02C9                     _initSwitch2:	
  2327                           
  2328                           ;switch2.c: 23: int initState = getSwitch2State();
  2329                           
  2330                           ;incstack = 0
  2331                           ; Regs used in _initSwitch2: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2332  02C9  2306               	fcall	_getSwitch2State
  2333  02CA  0020               	movlb	0	; select bank0
  2334  02CB  0834               	movf	?_getSwitch2State+1,w
  2335  02CC  00BA               	movwf	initSwitch2@initState+1
  2336  02CD  0833               	movf	?_getSwitch2State,w
  2337  02CE  00B9               	movwf	initSwitch2@initState
  2338                           
  2339                           ;switch2.c: 24: setSwitch2State(initState);
  2340  02CF  083A               	movf	initSwitch2@initState+1,w
  2341  02D0  00B8               	movwf	setSwitch2State@f_state+1
  2342  02D1  0839               	movf	initSwitch2@initState,w
  2343  02D2  00B7               	movwf	setSwitch2State@f_state
  2344  02D3  2134               	fcall	_setSwitch2State
  2345  02D4  0008               	return
  2346  02D5                     __end_of_initSwitch2:	
  2347                           
  2348                           	psect	text4
  2349  0134                     __ptext4:	
  2350 ;; *************** function _setSwitch2State *****************
  2351 ;; Defined at:
  2352 ;;		line 72 in file "switch2.c"
  2353 ;; Parameters:    Size  Location     Type
  2354 ;;  f_state         2    5[BANK0 ] int 
  2355 ;; Auto vars:     Size  Location     Type
  2356 ;;		None
  2357 ;; Return value:  Size  Location     Type
  2358 ;;                  1    wreg      void 
  2359 ;; Registers used:
  2360 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2361 ;; Tracked objects:
  2362 ;;		On entry : 0/0
  2363 ;;		On exit  : 0/0
  2364 ;;		Unchanged: 0/0
  2365 ;; Data sizes:     COMMON   BANK0   BANK1
  2366 ;;      Params:         0       2       0
  2367 ;;      Locals:         0       0       0
  2368 ;;      Temps:          0       0       0
  2369 ;;      Totals:         0       2       0
  2370 ;;Total ram usage:        2 bytes
  2371 ;; Hardware stack levels used:    1
  2372 ;; Hardware stack levels required when called:    5
  2373 ;; This function calls:
  2374 ;;		_updateSwitch2State
  2375 ;;		_wait_ms
  2376 ;; This function is called by:
  2377 ;;		_initSwitch2
  2378 ;;		_updateSwitch2
  2379 ;; This function uses a non-reentrant model
  2380 ;;
  2381                           
  2382                           
  2383                           ;psect for function _setSwitch2State
  2384  0134                     _setSwitch2State:	
  2385                           
  2386                           ;switch2.c: 73: if (switch2_state == f_state) {return;}
  2387                           
  2388                           ;incstack = 0
  2389                           ; Regs used in _setSwitch2State: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2390  0134  0020               	movlb	0	; select bank0
  2391  0135  0838               	movf	setSwitch2State@f_state+1,w
  2392  0136  0640               	xorwf	_switch2_state+1,w
  2393  0137  1D03               	skipz
  2394  0138  293B               	goto	u745
  2395  0139  0837               	movf	setSwitch2State@f_state,w
  2396  013A  063F               	xorwf	_switch2_state,w
  2397  013B                     u745:	
  2398  013B  1903               	btfsc	3,2
  2399  013C  0008               	return
  2400                           
  2401                           ;switch2.c: 74: switch2_state = f_state;
  2402  013D  0838               	movf	setSwitch2State@f_state+1,w
  2403  013E  00C0               	movwf	_switch2_state+1
  2404  013F  0837               	movf	setSwitch2State@f_state,w
  2405  0140  00BF               	movwf	_switch2_state
  2406                           
  2407                           ;switch2.c: 75: LATAbits.LATA2 = f_state;
  2408  0141  0C37               	rrf	setSwitch2State@f_state,w
  2409  0142  0022               	movlb	2	; select bank2
  2410  0143  1C03               	skipc
  2411  0144  110C               	bcf	12,2	;volatile
  2412  0145  1803               	skipnc
  2413  0146  150C               	bsf	12,2	;volatile
  2414                           
  2415                           ;switch2.c: 76: LATCbits.LATC2 = f_state;
  2416  0147  0020               	movlb	0	; select bank0
  2417  0148  0C37               	rrf	setSwitch2State@f_state,w
  2418  0149  0022               	movlb	2	; select bank2
  2419  014A  1C03               	skipc
  2420  014B  110E               	bcf	14,2	;volatile
  2421  014C  1803               	skipnc
  2422  014D  150E               	bsf	14,2	;volatile
  2423                           
  2424                           ;switch2.c: 77: LATCbits.LATC1 = !f_state;
  2425  014E  0020               	movlb	0	; select bank0
  2426  014F  0837               	movf	setSwitch2State@f_state,w
  2427  0150  0438               	iorwf	setSwitch2State@f_state+1,w
  2428  0151  1D03               	btfss	3,2
  2429  0152  2956               	goto	u750
  2430  0153  0022               	movlb	2	; select bank2
  2431  0154  148E               	bsf	14,1	;volatile
  2432  0155  2958               	goto	l1308
  2433  0156                     u750:	
  2434  0156  0022               	movlb	2	; select bank2
  2435  0157  108E               	bcf	14,1	;volatile
  2436  0158                     l1308:	
  2437                           
  2438                           ;switch2.c: 79: wait_ms(20);
  2439  0158  3014               	movlw	20
  2440  0159  0020               	movlb	0	; select bank0
  2441  015A  00B2               	movwf	wait_ms@time
  2442  015B  3000               	movlw	0
  2443  015C  00B3               	movwf	wait_ms@time+1
  2444  015D  220B               	fcall	_wait_ms
  2445                           
  2446                           ;switch2.c: 81: LATCbits.LATC2 = 0;
  2447  015E  0022               	movlb	2	; select bank2
  2448  015F  110E               	bcf	14,2	;volatile
  2449                           
  2450                           ;switch2.c: 82: LATCbits.LATC1 = 0;
  2451  0160  108E               	bcf	14,1	;volatile
  2452                           
  2453                           ;switch2.c: 84: updateSwitch2State(switch2_state);
  2454  0161  0020               	movlb	0	; select bank0
  2455  0162  0840               	movf	_switch2_state+1,w
  2456  0163  00B6               	movwf	updateSwitch2State@state+1
  2457  0164  083F               	movf	_switch2_state,w
  2458  0165  00B5               	movwf	updateSwitch2State@state
  2459  0166  22AF               	fcall	_updateSwitch2State
  2460                           
  2461                           ;switch2.c: 85: wait_ms(20);
  2462  0167  3014               	movlw	20
  2463  0168  0020               	movlb	0	; select bank0
  2464  0169  00B2               	movwf	wait_ms@time
  2465  016A  3000               	movlw	0
  2466  016B  00B3               	movwf	wait_ms@time+1
  2467  016C  220B               	fcall	_wait_ms
  2468  016D  0008               	return
  2469  016E                     __end_of_setSwitch2State:	
  2470                           
  2471                           	psect	text5
  2472  02AF                     __ptext5:	
  2473 ;; *************** function _updateSwitch2State *****************
  2474 ;; Defined at:
  2475 ;;		line 64 in file "state_manager.c"
  2476 ;; Parameters:    Size  Location     Type
  2477 ;;  state           2    3[BANK0 ] int 
  2478 ;; Auto vars:     Size  Location     Type
  2479 ;;		None
  2480 ;; Return value:  Size  Location     Type
  2481 ;;                  1    wreg      void 
  2482 ;; Registers used:
  2483 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2484 ;; Tracked objects:
  2485 ;;		On entry : 0/0
  2486 ;;		On exit  : 0/0
  2487 ;;		Unchanged: 0/0
  2488 ;; Data sizes:     COMMON   BANK0   BANK1
  2489 ;;      Params:         0       2       0
  2490 ;;      Locals:         0       0       0
  2491 ;;      Temps:          0       0       0
  2492 ;;      Totals:         0       2       0
  2493 ;;Total ram usage:        2 bytes
  2494 ;; Hardware stack levels used:    1
  2495 ;; Hardware stack levels required when called:    4
  2496 ;; This function calls:
  2497 ;;		_saveState
  2498 ;; This function is called by:
  2499 ;;		_setSwitch2State
  2500 ;; This function uses a non-reentrant model
  2501 ;;
  2502                           
  2503                           
  2504                           ;psect for function _updateSwitch2State
  2505  02AF                     _updateSwitch2State:	
  2506                           
  2507                           ;state_manager.c: 65: if (state != 1) {state = 0;}
  2508                           
  2509                           ;incstack = 0
  2510                           ; Regs used in _updateSwitch2State: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2511  02AF  0020               	movlb	0	; select bank0
  2512  02B0  0335               	decf	updateSwitch2State@state,w
  2513  02B1  0436               	iorwf	updateSwitch2State@state+1,w
  2514  02B2  1903               	btfsc	3,2
  2515  02B3  2AB6               	goto	l1256
  2516  02B4  01B5               	clrf	updateSwitch2State@state
  2517  02B5  01B6               	clrf	updateSwitch2State@state+1
  2518  02B6                     l1256:	
  2519                           
  2520                           ;state_manager.c: 67: pedalState.switch2 = state;
  2521  02B6  0836               	movf	updateSwitch2State@state+1,w
  2522  02B7  00B1               	movwf	_pedalState+3
  2523  02B8  0835               	movf	updateSwitch2State@state,w
  2524  02B9  00B0               	movwf	_pedalState+2
  2525                           
  2526                           ;state_manager.c: 68: saveState();
  2527  02BA  229F               	fcall	_saveState
  2528  02BB  0008               	return
  2529  02BC                     __end_of_updateSwitch2State:	
  2530                           
  2531                           	psect	text6
  2532  0306                     __ptext6:	
  2533 ;; *************** function _getSwitch2State *****************
  2534 ;; Defined at:
  2535 ;;		line 52 in file "state_manager.c"
  2536 ;; Parameters:    Size  Location     Type
  2537 ;;		None
  2538 ;; Auto vars:     Size  Location     Type
  2539 ;;		None
  2540 ;; Return value:  Size  Location     Type
  2541 ;;                  2    1[BANK0 ] int 
  2542 ;; Registers used:
  2543 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2544 ;; Tracked objects:
  2545 ;;		On entry : 0/0
  2546 ;;		On exit  : 0/0
  2547 ;;		Unchanged: 0/0
  2548 ;; Data sizes:     COMMON   BANK0   BANK1
  2549 ;;      Params:         0       2       0
  2550 ;;      Locals:         0       0       0
  2551 ;;      Temps:          0       0       0
  2552 ;;      Totals:         0       2       0
  2553 ;;Total ram usage:        2 bytes
  2554 ;; Hardware stack levels used:    1
  2555 ;; Hardware stack levels required when called:    4
  2556 ;; This function calls:
  2557 ;;		_getCurrentState
  2558 ;; This function is called by:
  2559 ;;		_initSwitch2
  2560 ;; This function uses a non-reentrant model
  2561 ;;
  2562                           
  2563                           
  2564                           ;psect for function _getSwitch2State
  2565  0306                     _getSwitch2State:	
  2566                           
  2567                           ;state_manager.c: 53: getCurrentState();
  2568                           
  2569                           ;incstack = 0
  2570                           ; Regs used in _getSwitch2State: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2571  0306  2233               	fcall	_getCurrentState
  2572                           
  2573                           ;state_manager.c: 54: return pedalState.switch2;
  2574  0307  0020               	movlb	0	; select bank0
  2575  0308  0831               	movf	_pedalState+3,w
  2576  0309  00B4               	movwf	?_getSwitch2State+1
  2577  030A  0830               	movf	_pedalState+2,w
  2578  030B  00B3               	movwf	?_getSwitch2State
  2579  030C  0008               	return
  2580  030D                     __end_of_getSwitch2State:	
  2581                           
  2582                           	psect	text7
  2583  02D5                     __ptext7:	
  2584 ;; *************** function _initSwitch1 *****************
  2585 ;; Defined at:
  2586 ;;		line 22 in file "switch1.c"
  2587 ;; Parameters:    Size  Location     Type
  2588 ;;		None
  2589 ;; Auto vars:     Size  Location     Type
  2590 ;;  initState       2    7[BANK0 ] int 
  2591 ;; Return value:  Size  Location     Type
  2592 ;;                  1    wreg      void 
  2593 ;; Registers used:
  2594 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2595 ;; Tracked objects:
  2596 ;;		On entry : 0/0
  2597 ;;		On exit  : 0/0
  2598 ;;		Unchanged: 0/0
  2599 ;; Data sizes:     COMMON   BANK0   BANK1
  2600 ;;      Params:         0       0       0
  2601 ;;      Locals:         0       2       0
  2602 ;;      Temps:          0       0       0
  2603 ;;      Totals:         0       2       0
  2604 ;;Total ram usage:        2 bytes
  2605 ;; Hardware stack levels used:    1
  2606 ;; Hardware stack levels required when called:    6
  2607 ;; This function calls:
  2608 ;;		_getSwitch1State
  2609 ;;		_setSwitch1State
  2610 ;; This function is called by:
  2611 ;;		_main
  2612 ;; This function uses a non-reentrant model
  2613 ;;
  2614                           
  2615                           
  2616                           ;psect for function _initSwitch1
  2617  02D5                     _initSwitch1:	
  2618                           
  2619                           ;switch1.c: 23: int initState = getSwitch1State();
  2620                           
  2621                           ;incstack = 0
  2622                           ; Regs used in _initSwitch1: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2623  02D5  22E1               	fcall	_getSwitch1State
  2624  02D6  0020               	movlb	0	; select bank0
  2625  02D7  0834               	movf	?_getSwitch1State+1,w
  2626  02D8  00BA               	movwf	initSwitch1@initState+1
  2627  02D9  0833               	movf	?_getSwitch1State,w
  2628  02DA  00B9               	movwf	initSwitch1@initState
  2629                           
  2630                           ;switch1.c: 24: setSwitch1State(initState);
  2631  02DB  083A               	movf	initSwitch1@initState+1,w
  2632  02DC  00B8               	movwf	setSwitch1State@f_state+1
  2633  02DD  0839               	movf	initSwitch1@initState,w
  2634  02DE  00B7               	movwf	setSwitch1State@f_state
  2635  02DF  216E               	fcall	_setSwitch1State
  2636  02E0  0008               	return
  2637  02E1                     __end_of_initSwitch1:	
  2638                           
  2639                           	psect	text8
  2640  016E                     __ptext8:	
  2641 ;; *************** function _setSwitch1State *****************
  2642 ;; Defined at:
  2643 ;;		line 72 in file "switch1.c"
  2644 ;; Parameters:    Size  Location     Type
  2645 ;;  f_state         2    5[BANK0 ] int 
  2646 ;; Auto vars:     Size  Location     Type
  2647 ;;		None
  2648 ;; Return value:  Size  Location     Type
  2649 ;;                  1    wreg      void 
  2650 ;; Registers used:
  2651 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2652 ;; Tracked objects:
  2653 ;;		On entry : 0/0
  2654 ;;		On exit  : 0/0
  2655 ;;		Unchanged: 0/0
  2656 ;; Data sizes:     COMMON   BANK0   BANK1
  2657 ;;      Params:         0       2       0
  2658 ;;      Locals:         0       0       0
  2659 ;;      Temps:          0       0       0
  2660 ;;      Totals:         0       2       0
  2661 ;;Total ram usage:        2 bytes
  2662 ;; Hardware stack levels used:    1
  2663 ;; Hardware stack levels required when called:    5
  2664 ;; This function calls:
  2665 ;;		_updateSwitch1State
  2666 ;;		_wait_ms
  2667 ;; This function is called by:
  2668 ;;		_initSwitch1
  2669 ;;		_updateSwitch1
  2670 ;; This function uses a non-reentrant model
  2671 ;;
  2672                           
  2673                           
  2674                           ;psect for function _setSwitch1State
  2675  016E                     _setSwitch1State:	
  2676                           
  2677                           ;switch1.c: 73: if (switch1_state == f_state) {return;}
  2678                           
  2679                           ;incstack = 0
  2680                           ; Regs used in _setSwitch1State: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2681  016E  0020               	movlb	0	; select bank0
  2682  016F  0838               	movf	setSwitch1State@f_state+1,w
  2683  0170  063C               	xorwf	_switch1_state+1,w
  2684  0171  1D03               	skipz
  2685  0172  2975               	goto	u715
  2686  0173  0837               	movf	setSwitch1State@f_state,w
  2687  0174  063B               	xorwf	_switch1_state,w
  2688  0175                     u715:	
  2689  0175  1903               	btfsc	3,2
  2690  0176  0008               	return
  2691                           
  2692                           ;switch1.c: 74: switch1_state = f_state;
  2693  0177  0838               	movf	setSwitch1State@f_state+1,w
  2694  0178  00BC               	movwf	_switch1_state+1
  2695  0179  0837               	movf	setSwitch1State@f_state,w
  2696  017A  00BB               	movwf	_switch1_state
  2697                           
  2698                           ;switch1.c: 75: LATCbits.LATC5 = f_state;
  2699  017B  0C37               	rrf	setSwitch1State@f_state,w
  2700  017C  0022               	movlb	2	; select bank2
  2701  017D  1C03               	skipc
  2702  017E  128E               	bcf	14,5	;volatile
  2703  017F  1803               	skipnc
  2704  0180  168E               	bsf	14,5	;volatile
  2705                           
  2706                           ;switch1.c: 76: LATCbits.LATC0 = f_state;
  2707  0181  0020               	movlb	0	; select bank0
  2708  0182  0C37               	rrf	setSwitch1State@f_state,w
  2709  0183  0022               	movlb	2	; select bank2
  2710  0184  1C03               	skipc
  2711  0185  100E               	bcf	14,0	;volatile
  2712  0186  1803               	skipnc
  2713  0187  140E               	bsf	14,0	;volatile
  2714                           
  2715                           ;switch1.c: 77: LATCbits.LATC4 = !f_state;
  2716  0188  0020               	movlb	0	; select bank0
  2717  0189  0837               	movf	setSwitch1State@f_state,w
  2718  018A  0438               	iorwf	setSwitch1State@f_state+1,w
  2719  018B  1D03               	btfss	3,2
  2720  018C  2990               	goto	u720
  2721  018D  0022               	movlb	2	; select bank2
  2722  018E  160E               	bsf	14,4	;volatile
  2723  018F  2992               	goto	l1286
  2724  0190                     u720:	
  2725  0190  0022               	movlb	2	; select bank2
  2726  0191  120E               	bcf	14,4	;volatile
  2727  0192                     l1286:	
  2728                           
  2729                           ;switch1.c: 79: wait_ms(20);
  2730  0192  3014               	movlw	20
  2731  0193  0020               	movlb	0	; select bank0
  2732  0194  00B2               	movwf	wait_ms@time
  2733  0195  3000               	movlw	0
  2734  0196  00B3               	movwf	wait_ms@time+1
  2735  0197  220B               	fcall	_wait_ms
  2736                           
  2737                           ;switch1.c: 81: LATCbits.LATC0 = 0;
  2738  0198  0022               	movlb	2	; select bank2
  2739  0199  100E               	bcf	14,0	;volatile
  2740                           
  2741                           ;switch1.c: 82: LATCbits.LATC4 = 0;
  2742  019A  120E               	bcf	14,4	;volatile
  2743                           
  2744                           ;switch1.c: 84: updateSwitch1State(switch1_state);
  2745  019B  0020               	movlb	0	; select bank0
  2746  019C  083C               	movf	_switch1_state+1,w
  2747  019D  00B6               	movwf	updateSwitch1State@state+1
  2748  019E  083B               	movf	_switch1_state,w
  2749  019F  00B5               	movwf	updateSwitch1State@state
  2750  01A0  22BC               	fcall	_updateSwitch1State
  2751                           
  2752                           ;switch1.c: 85: wait_ms(20);
  2753  01A1  3014               	movlw	20
  2754  01A2  0020               	movlb	0	; select bank0
  2755  01A3  00B2               	movwf	wait_ms@time
  2756  01A4  3000               	movlw	0
  2757  01A5  00B3               	movwf	wait_ms@time+1
  2758  01A6  220B               	fcall	_wait_ms
  2759  01A7  0008               	return
  2760  01A8                     __end_of_setSwitch1State:	
  2761                           
  2762                           	psect	text9
  2763  020B                     __ptext9:	
  2764 ;; *************** function _wait_ms *****************
  2765 ;; Defined at:
  2766 ;;		line 23 in file "system.c"
  2767 ;; Parameters:    Size  Location     Type
  2768 ;;  time            2    0[BANK0 ] unsigned int 
  2769 ;; Auto vars:     Size  Location     Type
  2770 ;;		None
  2771 ;; Return value:  Size  Location     Type
  2772 ;;                  1    wreg      void 
  2773 ;; Registers used:
  2774 ;;		wreg, status,2, status,0, pclath, cstack
  2775 ;; Tracked objects:
  2776 ;;		On entry : 0/0
  2777 ;;		On exit  : 0/0
  2778 ;;		Unchanged: 0/0
  2779 ;; Data sizes:     COMMON   BANK0   BANK1
  2780 ;;      Params:         0       2       0
  2781 ;;      Locals:         0       0       0
  2782 ;;      Temps:          0       0       0
  2783 ;;      Totals:         0       2       0
  2784 ;;Total ram usage:        2 bytes
  2785 ;; Hardware stack levels used:    1
  2786 ;; Hardware stack levels required when called:    2
  2787 ;; This function calls:
  2788 ;;		___lmul
  2789 ;; This function is called by:
  2790 ;;		_setSwitch1State
  2791 ;;		_setSwitch2State
  2792 ;; This function uses a non-reentrant model
  2793 ;;
  2794                           
  2795                           
  2796                           ;psect for function _wait_ms
  2797  020B                     _wait_ms:	
  2798                           
  2799                           ;system.c: 25: static long timel = 0;
  2800                           ;system.c: 26: timel = time * 1000l;
  2801                           
  2802                           ;incstack = 0
  2803                           ; Regs used in _wait_ms: [wreg+status,2+status,0+pclath+cstack]
  2804  020B  0020               	movlb	0	; select bank0
  2805  020C  0832               	movf	wait_ms@time,w
  2806  020D  00F1               	movwf	___lmul@multiplier
  2807  020E  0833               	movf	wait_ms@time+1,w
  2808  020F  00F2               	movwf	___lmul@multiplier+1
  2809  0210  01F3               	clrf	___lmul@multiplier+2
  2810  0211  01F4               	clrf	___lmul@multiplier+3
  2811  0212  3000               	movlw	0
  2812  0213  00F8               	movwf	___lmul@multiplicand+3
  2813  0214  3000               	movlw	0
  2814  0215  00F7               	movwf	___lmul@multiplicand+2
  2815  0216  3003               	movlw	3
  2816  0217  00F6               	movwf	___lmul@multiplicand+1
  2817  0218  30E8               	movlw	232
  2818  0219  00F5               	movwf	___lmul@multiplicand
  2819  021A  21DC               	fcall	___lmul
  2820  021B  0874               	movf	?___lmul+3,w
  2821  021C  0020               	movlb	0	; select bank0
  2822  021D  00A3               	movwf	wait_ms@timel+3
  2823  021E  0873               	movf	?___lmul+2,w
  2824  021F  00A2               	movwf	wait_ms@timel+2
  2825  0220  0872               	movf	?___lmul+1,w
  2826  0221  00A1               	movwf	wait_ms@timel+1
  2827  0222  0871               	movf	?___lmul,w
  2828  0223  00A0               	movwf	wait_ms@timel
  2829  0224                     l71:	
  2830                           ;system.c: 27: for( ; timel; timel--);
  2831                           
  2832  0224  0823               	movf	wait_ms@timel+3,w
  2833  0225  0422               	iorwf	wait_ms@timel+2,w
  2834  0226  0421               	iorwf	wait_ms@timel+1,w
  2835  0227  0420               	iorwf	wait_ms@timel,w
  2836  0228  1903               	btfsc	3,2
  2837  0229  0008               	return
  2838  022A  30FF               	movlw	255
  2839  022B  07A0               	addwf	wait_ms@timel,f
  2840  022C  30FF               	movlw	255
  2841  022D  3DA1               	addwfc	wait_ms@timel+1,f
  2842  022E  30FF               	movlw	255
  2843  022F  3DA2               	addwfc	wait_ms@timel+2,f
  2844  0230  30FF               	movlw	255
  2845  0231  3DA3               	addwfc	wait_ms@timel+3,f
  2846  0232  2A24               	goto	l71
  2847  0233                     __end_of_wait_ms:	
  2848                           
  2849                           	psect	text10
  2850  01DC                     __ptext10:	
  2851 ;; *************** function ___lmul *****************
  2852 ;; Defined at:
  2853 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul32.c"
  2854 ;; Parameters:    Size  Location     Type
  2855 ;;  multiplier      4    1[COMMON] unsigned long 
  2856 ;;  multiplicand    4    5[COMMON] unsigned long 
  2857 ;; Auto vars:     Size  Location     Type
  2858 ;;  product         4    9[COMMON] unsigned long 
  2859 ;; Return value:  Size  Location     Type
  2860 ;;                  4    1[COMMON] unsigned long 
  2861 ;; Registers used:
  2862 ;;		wreg, status,2, status,0
  2863 ;; Tracked objects:
  2864 ;;		On entry : 0/0
  2865 ;;		On exit  : 0/0
  2866 ;;		Unchanged: 0/0
  2867 ;; Data sizes:     COMMON   BANK0   BANK1
  2868 ;;      Params:         8       0       0
  2869 ;;      Locals:         4       0       0
  2870 ;;      Temps:          0       0       0
  2871 ;;      Totals:        12       0       0
  2872 ;;Total ram usage:       12 bytes
  2873 ;; Hardware stack levels used:    1
  2874 ;; Hardware stack levels required when called:    1
  2875 ;; This function calls:
  2876 ;;		Nothing
  2877 ;; This function is called by:
  2878 ;;		_wait_ms
  2879 ;; This function uses a non-reentrant model
  2880 ;;
  2881                           
  2882                           
  2883                           ;psect for function ___lmul
  2884  01DC                     ___lmul:	
  2885                           
  2886                           ;incstack = 0
  2887                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  2888  01DC  3000               	movlw	0
  2889  01DD  00FC               	movwf	___lmul@product+3
  2890  01DE  3000               	movlw	0
  2891  01DF  00FB               	movwf	___lmul@product+2
  2892  01E0  3000               	movlw	0
  2893  01E1  00FA               	movwf	___lmul@product+1
  2894  01E2  3000               	movlw	0
  2895  01E3  00F9               	movwf	___lmul@product
  2896  01E4                     l1224:	
  2897  01E4  1C71               	btfss	___lmul@multiplier,0
  2898  01E5  29EE               	goto	l1228
  2899  01E6  0875               	movf	___lmul@multiplicand,w
  2900  01E7  07F9               	addwf	___lmul@product,f
  2901  01E8  0876               	movf	___lmul@multiplicand+1,w
  2902  01E9  3DFA               	addwfc	___lmul@product+1,f
  2903  01EA  0877               	movf	___lmul@multiplicand+2,w
  2904  01EB  3DFB               	addwfc	___lmul@product+2,f
  2905  01EC  0878               	movf	___lmul@multiplicand+3,w
  2906  01ED  3DFC               	addwfc	___lmul@product+3,f
  2907  01EE                     l1228:	
  2908  01EE  3001               	movlw	1
  2909  01EF                     u645:	
  2910  01EF  35F5               	lslf	___lmul@multiplicand,f
  2911  01F0  0DF6               	rlf	___lmul@multiplicand+1,f
  2912  01F1  0DF7               	rlf	___lmul@multiplicand+2,f
  2913  01F2  0DF8               	rlf	___lmul@multiplicand+3,f
  2914  01F3  0B89               	decfsz	9,f
  2915  01F4  29EF               	goto	u645
  2916  01F5  3001               	movlw	1
  2917  01F6                     u655:	
  2918  01F6  36F4               	lsrf	___lmul@multiplier+3,f
  2919  01F7  0CF3               	rrf	___lmul@multiplier+2,f
  2920  01F8  0CF2               	rrf	___lmul@multiplier+1,f
  2921  01F9  0CF1               	rrf	___lmul@multiplier,f
  2922  01FA  0B89               	decfsz	9,f
  2923  01FB  29F6               	goto	u655
  2924  01FC  0874               	movf	___lmul@multiplier+3,w
  2925  01FD  0473               	iorwf	___lmul@multiplier+2,w
  2926  01FE  0472               	iorwf	___lmul@multiplier+1,w
  2927  01FF  0471               	iorwf	___lmul@multiplier,w
  2928  0200  1D03               	skipz
  2929  0201  29E4               	goto	l1224
  2930  0202  087C               	movf	___lmul@product+3,w
  2931  0203  00F4               	movwf	?___lmul+3
  2932  0204  087B               	movf	___lmul@product+2,w
  2933  0205  00F3               	movwf	?___lmul+2
  2934  0206  087A               	movf	___lmul@product+1,w
  2935  0207  00F2               	movwf	?___lmul+1
  2936  0208  0879               	movf	___lmul@product,w
  2937  0209  00F1               	movwf	?___lmul
  2938  020A  0008               	return
  2939  020B                     __end_of___lmul:	
  2940                           
  2941                           	psect	text11
  2942  02BC                     __ptext11:	
  2943 ;; *************** function _updateSwitch1State *****************
  2944 ;; Defined at:
  2945 ;;		line 58 in file "state_manager.c"
  2946 ;; Parameters:    Size  Location     Type
  2947 ;;  state           2    3[BANK0 ] int 
  2948 ;; Auto vars:     Size  Location     Type
  2949 ;;		None
  2950 ;; Return value:  Size  Location     Type
  2951 ;;                  1    wreg      void 
  2952 ;; Registers used:
  2953 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2954 ;; Tracked objects:
  2955 ;;		On entry : 0/0
  2956 ;;		On exit  : 0/0
  2957 ;;		Unchanged: 0/0
  2958 ;; Data sizes:     COMMON   BANK0   BANK1
  2959 ;;      Params:         0       2       0
  2960 ;;      Locals:         0       0       0
  2961 ;;      Temps:          0       0       0
  2962 ;;      Totals:         0       2       0
  2963 ;;Total ram usage:        2 bytes
  2964 ;; Hardware stack levels used:    1
  2965 ;; Hardware stack levels required when called:    4
  2966 ;; This function calls:
  2967 ;;		_saveState
  2968 ;; This function is called by:
  2969 ;;		_setSwitch1State
  2970 ;; This function uses a non-reentrant model
  2971 ;;
  2972                           
  2973                           
  2974                           ;psect for function _updateSwitch1State
  2975  02BC                     _updateSwitch1State:	
  2976                           
  2977                           ;state_manager.c: 59: if (state != 1) {state = 0;}
  2978                           
  2979                           ;incstack = 0
  2980                           ; Regs used in _updateSwitch1State: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2981  02BC  0020               	movlb	0	; select bank0
  2982  02BD  0335               	decf	updateSwitch1State@state,w
  2983  02BE  0436               	iorwf	updateSwitch1State@state+1,w
  2984  02BF  1903               	btfsc	3,2
  2985  02C0  2AC3               	goto	l1248
  2986  02C1  01B5               	clrf	updateSwitch1State@state
  2987  02C2  01B6               	clrf	updateSwitch1State@state+1
  2988  02C3                     l1248:	
  2989                           
  2990                           ;state_manager.c: 61: pedalState.switch1 = state;
  2991  02C3  0836               	movf	updateSwitch1State@state+1,w
  2992  02C4  00AF               	movwf	_pedalState+1
  2993  02C5  0835               	movf	updateSwitch1State@state,w
  2994  02C6  00AE               	movwf	_pedalState
  2995                           
  2996                           ;state_manager.c: 62: saveState();
  2997  02C7  229F               	fcall	_saveState
  2998  02C8  0008               	return
  2999  02C9                     __end_of_updateSwitch1State:	
  3000                           
  3001                           	psect	text12
  3002  029F                     __ptext12:	
  3003 ;; *************** function _saveState *****************
  3004 ;; Defined at:
  3005 ;;		line 73 in file "state_manager.c"
  3006 ;; Parameters:    Size  Location     Type
  3007 ;;		None
  3008 ;; Auto vars:     Size  Location     Type
  3009 ;;  r               1   12[COMMON] unsigned char 
  3010 ;; Return value:  Size  Location     Type
  3011 ;;                  1    wreg      void 
  3012 ;; Registers used:
  3013 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3014 ;; Tracked objects:
  3015 ;;		On entry : 0/0
  3016 ;;		On exit  : 0/0
  3017 ;;		Unchanged: 0/0
  3018 ;; Data sizes:     COMMON   BANK0   BANK1
  3019 ;;      Params:         0       0       0
  3020 ;;      Locals:         1       0       0
  3021 ;;      Temps:          0       3       0
  3022 ;;      Totals:         1       3       0
  3023 ;;Total ram usage:        4 bytes
  3024 ;; Hardware stack levels used:    1
  3025 ;; Hardware stack levels required when called:    3
  3026 ;; This function calls:
  3027 ;;		_HEF_ByteArrayWrite
  3028 ;; This function is called by:
  3029 ;;		_updateSwitch1State
  3030 ;;		_updateSwitch2State
  3031 ;; This function uses a non-reentrant model
  3032 ;;
  3033                           
  3034                           
  3035                           ;psect for function _saveState
  3036  029F                     _saveState:	
  3037                           
  3038                           ;state_manager.c: 74: uint8_t r;
  3039                           ;state_manager.c: 75: r = HEF_ByteArrayWrite(1, (void *) &pedalState, sizeof (pedalState
      +                          ));
  3040                           
  3041                           ;incstack = 0
  3042                           ; Regs used in _saveState: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3043  029F  302E               	movlw	(low (_pedalState| 0))& (0+255)
  3044  02A0  0020               	movlb	0	; select bank0
  3045  02A1  00B2               	movwf	??_saveState
  3046  02A2  0832               	movf	??_saveState,w
  3047  02A3  00F4               	movwf	HEF_ByteArrayWrite@byteArray
  3048  02A4  3004               	movlw	4
  3049  02A5  00B3               	movwf	??_saveState+1
  3050  02A6  0833               	movf	??_saveState+1,w
  3051  02A7  00F5               	movwf	HEF_ByteArrayWrite@count
  3052  02A8  3001               	movlw	1
  3053  02A9  20E1               	fcall	_HEF_ByteArrayWrite
  3054  02AA  0020               	movlb	0	; select bank0
  3055  02AB  00B4               	movwf	??_saveState+2
  3056  02AC  0834               	movf	??_saveState+2,w
  3057  02AD  00FC               	movwf	saveState@r
  3058  02AE  0008               	return
  3059  02AF                     __end_of_saveState:	
  3060                           
  3061                           	psect	text13
  3062  00E1                     __ptext13:	
  3063 ;; *************** function _HEF_ByteArrayWrite *****************
  3064 ;; Defined at:
  3065 ;;		line 12 in file "HEF.c"
  3066 ;; Parameters:    Size  Location     Type
  3067 ;;  block           1    wreg     unsigned char 
  3068 ;;  byteArray       1    4[COMMON] PTR unsigned char 
  3069 ;;		 -> pedalState(4), 
  3070 ;;  count           1    5[COMMON] unsigned char 
  3071 ;; Auto vars:     Size  Location     Type
  3072 ;;  block           1    9[COMMON] unsigned char 
  3073 ;;  blockAddr       2   10[COMMON] unsigned int 
  3074 ;;  GIEBitValue     1    8[COMMON] unsigned char 
  3075 ;;  i               1    0        unsigned char 
  3076 ;; Return value:  Size  Location     Type
  3077 ;;                  1    wreg      char 
  3078 ;; Registers used:
  3079 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3080 ;; Tracked objects:
  3081 ;;		On entry : 0/0
  3082 ;;		On exit  : 0/0
  3083 ;;		Unchanged: 0/0
  3084 ;; Data sizes:     COMMON   BANK0   BANK1
  3085 ;;      Params:         2       0       0
  3086 ;;      Locals:         4       0       0
  3087 ;;      Temps:          2       0       0
  3088 ;;      Totals:         8       0       0
  3089 ;;Total ram usage:        8 bytes
  3090 ;; Hardware stack levels used:    1
  3091 ;; Hardware stack levels required when called:    2
  3092 ;; This function calls:
  3093 ;;		_FLASH_EraseBlock
  3094 ;; This function is called by:
  3095 ;;		_saveState
  3096 ;; This function uses a non-reentrant model
  3097 ;;
  3098                           
  3099                           
  3100                           ;psect for function _HEF_ByteArrayWrite
  3101  00E1                     _HEF_ByteArrayWrite:	
  3102                           
  3103                           ;incstack = 0
  3104                           ; Regs used in _HEF_ByteArrayWrite: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3105                           ;HEF_ByteArrayWrite@block stored from wreg
  3106  00E1  00F9               	movwf	HEF_ByteArrayWrite@block
  3107                           
  3108                           ;HEF.c: 13: uint16_t blockAddr;
  3109                           ;HEF.c: 14: uint8_t GIEBitValue = INTCONbits.GIE;
  3110  00E2  3000               	movlw	0
  3111  00E3  1B8B               	btfsc	11,7	;volatile
  3112  00E4  3001               	movlw	1
  3113  00E5  00F8               	movwf	HEF_ByteArrayWrite@GIEBitValue
  3114                           
  3115                           ;HEF.c: 15: uint8_t i;
  3116                           ;HEF.c: 17: if ( ( block >= 128 / 32) || ( count > 32))
  3117  00E6  3004               	movlw	4
  3118  00E7  0279               	subwf	HEF_ByteArrayWrite@block,w
  3119  00E8  1803               	skipnc
  3120  00E9  28EE               	goto	l1134
  3121  00EA  3021               	movlw	33
  3122  00EB  0275               	subwf	HEF_ByteArrayWrite@count,w
  3123  00EC  1C03               	skipc
  3124  00ED  28F0               	goto	l1138
  3125  00EE                     l1134:	
  3126                           
  3127                           ;HEF.c: 18: return -1;
  3128  00EE  30FF               	movlw	255
  3129  00EF  0008               	return
  3130  00F0                     l1138:	
  3131                           
  3132                           ;HEF.c: 20: blockAddr = 16384 - 128 + block * 32;
  3133  00F0  0879               	movf	HEF_ByteArrayWrite@block,w
  3134  00F1  00F6               	movwf	??_HEF_ByteArrayWrite
  3135  00F2  01F7               	clrf	??_HEF_ByteArrayWrite+1
  3136  00F3  3005               	movlw	5
  3137  00F4                     u535:	
  3138  00F4  35F6               	lslf	??_HEF_ByteArrayWrite,f
  3139  00F5  0DF7               	rlf	??_HEF_ByteArrayWrite+1,f
  3140  00F6  0B89               	decfsz	9,f
  3141  00F7  28F4               	goto	u535
  3142  00F8  0876               	movf	??_HEF_ByteArrayWrite,w
  3143  00F9  3E80               	addlw	128
  3144  00FA  00FA               	movwf	HEF_ByteArrayWrite@blockAddr
  3145  00FB  303F               	movlw	63
  3146  00FC  3D77               	addwfc	??_HEF_ByteArrayWrite+1,w
  3147  00FD  00FB               	movwf	HEF_ByteArrayWrite@blockAddr+1
  3148                           
  3149                           ;HEF.c: 21: INTCONbits.GIE = 0;
  3150  00FE  138B               	bcf	11,7	;volatile
  3151                           
  3152                           ;HEF.c: 23: FLASH_EraseBlock( blockAddr);
  3153  00FF  087B               	movf	HEF_ByteArrayWrite@blockAddr+1,w
  3154  0100  00F2               	movwf	FLASH_EraseBlock@startAddr+1
  3155  0101  087A               	movf	HEF_ByteArrayWrite@blockAddr,w
  3156  0102  00F1               	movwf	FLASH_EraseBlock@startAddr
  3157  0103  2255               	fcall	_FLASH_EraseBlock
  3158                           
  3159                           ;HEF.c: 26: PMCON1bits.CFGS = 0;
  3160  0104  0023               	movlb	3	; select bank3
  3161  0105  1315               	bcf	21,6	;volatile
  3162                           
  3163                           ;HEF.c: 27: PMCON1bits.WREN = 1;
  3164  0106  1515               	bsf	21,2	;volatile
  3165                           
  3166                           ;HEF.c: 28: PMCON1bits.LWLO = 1;
  3167  0107  1695               	bsf	21,5	;volatile
  3168  0108                     l1172:	
  3169                           ;HEF.c: 30: while ( count > 0) {
  3170                           
  3171  0108  0875               	movf	HEF_ByteArrayWrite@count,w
  3172  0109  1903               	btfsc	3,2
  3173  010A  292B               	goto	l141
  3174                           
  3175                           ;HEF.c: 31: PMADR = blockAddr++;
  3176  010B  087B               	movf	HEF_ByteArrayWrite@blockAddr+1,w
  3177  010C  0023               	movlb	3	; select bank3
  3178  010D  0092               	movwf	18	;volatile
  3179  010E  087A               	movf	HEF_ByteArrayWrite@blockAddr,w
  3180  010F  0091               	movwf	17	;volatile
  3181  0110  3001               	movlw	1
  3182  0111  07FA               	addwf	HEF_ByteArrayWrite@blockAddr,f
  3183  0112  3000               	movlw	0
  3184  0113  3DFB               	addwfc	HEF_ByteArrayWrite@blockAddr+1,f
  3185                           
  3186                           ;HEF.c: 33: PMDATL = *byteArray++;
  3187  0114  0874               	movf	HEF_ByteArrayWrite@byteArray,w
  3188  0115  0086               	movwf	6
  3189  0116  0187               	clrf	7
  3190  0117  0801               	movf	1,w
  3191  0118  0093               	movwf	19	;volatile
  3192  0119  3001               	movlw	1
  3193  011A  00F6               	movwf	??_HEF_ByteArrayWrite
  3194  011B  0876               	movf	??_HEF_ByteArrayWrite,w
  3195  011C  07F4               	addwf	HEF_ByteArrayWrite@byteArray,f
  3196                           
  3197                           ;HEF.c: 34: PMDATH = 0;
  3198  011D  0194               	clrf	20	;volatile
  3199                           
  3200                           ;HEF.c: 35: if ( count == 1) {
  3201  011E  0375               	decf	HEF_ByteArrayWrite@count,w
  3202  011F  1903               	btfsc	3,2
  3203                           
  3204                           ;HEF.c: 36: PMCON1bits.LWLO = 0;
  3205  0120  1295               	bcf	21,5	;volatile
  3206                           
  3207                           ;HEF.c: 37: }
  3208                           ;HEF.c: 39: PMCON2 = 0x55;
  3209  0121  3055               	movlw	85
  3210  0122  0096               	movwf	22	;volsfr
  3211                           
  3212                           ;HEF.c: 40: PMCON2 = 0xAA;
  3213  0123  30AA               	movlw	170
  3214  0124  0096               	movwf	22	;volsfr
  3215                           
  3216                           ;HEF.c: 41: PMCON1bits.WR = 1;
  3217  0125  1495               	bsf	21,1	;volatile
  3218                           
  3219                           ;HEF.c: 42: __nop();
  3220  0126  0000               	nop
  3221                           
  3222                           ;HEF.c: 43: __nop();
  3223  0127  0000               	nop
  3224                           
  3225                           ;HEF.c: 44: count--;
  3226  0128  3001               	movlw	1
  3227  0129  02F5               	subwf	HEF_ByteArrayWrite@count,f
  3228  012A  2908               	goto	l1172
  3229  012B                     l141:	
  3230                           
  3231                           ;HEF.c: 45: }
  3232                           ;HEF.c: 47: PMCON1bits.WREN = 0;
  3233  012B  0023               	movlb	3	; select bank3
  3234  012C  1115               	bcf	21,2	;volatile
  3235                           
  3236                           ;HEF.c: 48: INTCONbits.GIE = GIEBitValue;
  3237  012D  0C78               	rrf	HEF_ByteArrayWrite@GIEBitValue,w
  3238  012E  1C03               	skipc
  3239  012F  138B               	bcf	11,7	;volatile
  3240  0130  1803               	skipnc
  3241  0131  178B               	bsf	11,7	;volatile
  3242                           
  3243                           ;HEF.c: 50: return 0;
  3244  0132  3000               	movlw	0
  3245  0133  0008               	return
  3246  0134                     __end_of_HEF_ByteArrayWrite:	
  3247                           
  3248                           	psect	text14
  3249  0255                     __ptext14:	
  3250 ;; *************** function _FLASH_EraseBlock *****************
  3251 ;; Defined at:
  3252 ;;		line 141 in file "mcc_generated_files/memory.c"
  3253 ;; Parameters:    Size  Location     Type
  3254 ;;  startAddr       2    1[COMMON] unsigned int 
  3255 ;; Auto vars:     Size  Location     Type
  3256 ;;  GIEBitValue     1    3[COMMON] unsigned char 
  3257 ;; Return value:  Size  Location     Type
  3258 ;;                  1    wreg      void 
  3259 ;; Registers used:
  3260 ;;		wreg, status,2, status,0
  3261 ;; Tracked objects:
  3262 ;;		On entry : 0/0
  3263 ;;		On exit  : 0/0
  3264 ;;		Unchanged: 0/0
  3265 ;; Data sizes:     COMMON   BANK0   BANK1
  3266 ;;      Params:         2       0       0
  3267 ;;      Locals:         1       0       0
  3268 ;;      Temps:          0       0       0
  3269 ;;      Totals:         3       0       0
  3270 ;;Total ram usage:        3 bytes
  3271 ;; Hardware stack levels used:    1
  3272 ;; Hardware stack levels required when called:    1
  3273 ;; This function calls:
  3274 ;;		Nothing
  3275 ;; This function is called by:
  3276 ;;		_HEF_ByteArrayWrite
  3277 ;;		_FLASH_WriteBlock
  3278 ;; This function uses a non-reentrant model
  3279 ;;
  3280                           
  3281                           
  3282                           ;psect for function _FLASH_EraseBlock
  3283  0255                     _FLASH_EraseBlock:	
  3284                           
  3285                           ;memory.c: 142: uint8_t GIEBitValue = INTCONbits.GIE;
  3286                           
  3287                           ;incstack = 0
  3288                           ; Regs used in _FLASH_EraseBlock: [wreg+status,2+status,0]
  3289  0255  3000               	movlw	0
  3290  0256  1B8B               	btfsc	11,7	;volatile
  3291  0257  3001               	movlw	1
  3292  0258  00F3               	movwf	FLASH_EraseBlock@GIEBitValue
  3293                           
  3294                           ;memory.c: 145: INTCONbits.GIE = 0;
  3295  0259  138B               	bcf	11,7	;volatile
  3296                           
  3297                           ;memory.c: 147: PMADRL = (startAddr & 0xFF);
  3298  025A  0871               	movf	FLASH_EraseBlock@startAddr,w
  3299  025B  0023               	movlb	3	; select bank3
  3300  025C  0091               	movwf	17	;volatile
  3301                           
  3302                           ;memory.c: 149: PMADRH = ((startAddr & 0xFF00) >> 8);
  3303  025D  0872               	movf	FLASH_EraseBlock@startAddr+1,w
  3304  025E  0092               	movwf	18	;volatile
  3305                           
  3306                           ;memory.c: 152: PMCON1bits.CFGS = 0;
  3307  025F  1315               	bcf	21,6	;volatile
  3308                           
  3309                           ;memory.c: 153: PMCON1bits.FREE = 1;
  3310  0260  1615               	bsf	21,4	;volatile
  3311                           
  3312                           ;memory.c: 154: PMCON1bits.WREN = 1;
  3313  0261  1515               	bsf	21,2	;volatile
  3314                           
  3315                           ;memory.c: 157: PMCON2 = 0x55;
  3316  0262  3055               	movlw	85
  3317  0263  0096               	movwf	22	;volsfr
  3318                           
  3319                           ;memory.c: 158: PMCON2 = 0xAA;
  3320  0264  30AA               	movlw	170
  3321  0265  0096               	movwf	22	;volsfr
  3322                           
  3323                           ;memory.c: 159: PMCON1bits.WR = 1;
  3324  0266  1495               	bsf	21,1	;volatile
  3325                           
  3326                           ;memory.c: 160: __nop();
  3327  0267  0000               	nop
  3328                           
  3329                           ;memory.c: 161: __nop();
  3330  0268  0000               	nop
  3331                           
  3332                           ;memory.c: 163: PMCON1bits.WREN = 0;
  3333  0269  0023               	movlb	3	; select bank3
  3334  026A  1115               	bcf	21,2	;volatile
  3335                           
  3336                           ;memory.c: 164: INTCONbits.GIE = GIEBitValue;
  3337  026B  0C73               	rrf	FLASH_EraseBlock@GIEBitValue,w
  3338  026C  1C03               	skipc
  3339  026D  138B               	bcf	11,7	;volatile
  3340  026E  1803               	skipnc
  3341  026F  178B               	bsf	11,7	;volatile
  3342  0270  0008               	return
  3343  0271                     __end_of_FLASH_EraseBlock:	
  3344                           
  3345                           	psect	text15
  3346  02E1                     __ptext15:	
  3347 ;; *************** function _getSwitch1State *****************
  3348 ;; Defined at:
  3349 ;;		line 44 in file "state_manager.c"
  3350 ;; Parameters:    Size  Location     Type
  3351 ;;		None
  3352 ;; Auto vars:     Size  Location     Type
  3353 ;;		None
  3354 ;; Return value:  Size  Location     Type
  3355 ;;                  2    1[BANK0 ] int 
  3356 ;; Registers used:
  3357 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3358 ;; Tracked objects:
  3359 ;;		On entry : 0/0
  3360 ;;		On exit  : 0/0
  3361 ;;		Unchanged: 0/0
  3362 ;; Data sizes:     COMMON   BANK0   BANK1
  3363 ;;      Params:         0       2       0
  3364 ;;      Locals:         0       0       0
  3365 ;;      Temps:          0       0       0
  3366 ;;      Totals:         0       2       0
  3367 ;;Total ram usage:        2 bytes
  3368 ;; Hardware stack levels used:    1
  3369 ;; Hardware stack levels required when called:    5
  3370 ;; This function calls:
  3371 ;;		_initStateManager
  3372 ;; This function is called by:
  3373 ;;		_initSwitch1
  3374 ;; This function uses a non-reentrant model
  3375 ;;
  3376                           
  3377                           
  3378                           ;psect for function _getSwitch1State
  3379  02E1                     _getSwitch1State:	
  3380                           
  3381                           ;state_manager.c: 45: if (!isInitialized) {
  3382                           
  3383                           ;incstack = 0
  3384                           ; Regs used in _getSwitch1State: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3385  02E1  0020               	movlb	0	; select bank0
  3386  02E2  0824               	movf	_isInitialized,w
  3387  02E3  0425               	iorwf	_isInitialized+1,w
  3388  02E4  1D03               	btfss	3,2
  3389  02E5  2AE7               	goto	l1264
  3390                           
  3391                           ;state_manager.c: 46: initStateManager();
  3392  02E6  2319               	fcall	_initStateManager
  3393  02E7                     l1264:	
  3394                           
  3395                           ;state_manager.c: 47: }
  3396                           ;state_manager.c: 48: return pedalState.switch1;
  3397  02E7  0020               	movlb	0	; select bank0
  3398  02E8  082F               	movf	_pedalState+1,w
  3399  02E9  00B4               	movwf	?_getSwitch1State+1
  3400  02EA  082E               	movf	_pedalState,w
  3401  02EB  00B3               	movwf	?_getSwitch1State
  3402  02EC  0008               	return
  3403  02ED                     __end_of_getSwitch1State:	
  3404                           
  3405                           	psect	text16
  3406  0319                     __ptext16:	
  3407 ;; *************** function _initStateManager *****************
  3408 ;; Defined at:
  3409 ;;		line 18 in file "state_manager.c"
  3410 ;; Parameters:    Size  Location     Type
  3411 ;;		None
  3412 ;; Auto vars:     Size  Location     Type
  3413 ;;		None
  3414 ;; Return value:  Size  Location     Type
  3415 ;;                  1    wreg      void 
  3416 ;; Registers used:
  3417 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3418 ;; Tracked objects:
  3419 ;;		On entry : 0/0
  3420 ;;		On exit  : 0/0
  3421 ;;		Unchanged: 0/0
  3422 ;; Data sizes:     COMMON   BANK0   BANK1
  3423 ;;      Params:         0       0       0
  3424 ;;      Locals:         0       0       0
  3425 ;;      Temps:          0       0       0
  3426 ;;      Totals:         0       0       0
  3427 ;;Total ram usage:        0 bytes
  3428 ;; Hardware stack levels used:    1
  3429 ;; Hardware stack levels required when called:    4
  3430 ;; This function calls:
  3431 ;;		_getCurrentState
  3432 ;; This function is called by:
  3433 ;;		_getSwitch1State
  3434 ;; This function uses a non-reentrant model
  3435 ;;
  3436                           
  3437                           
  3438                           ;psect for function _initStateManager
  3439  0319                     _initStateManager:	
  3440                           
  3441                           ;state_manager.c: 19: isInitialized = 0;
  3442                           
  3443                           ;incstack = 0
  3444                           ; Regs used in _initStateManager: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3445  0319  0020               	movlb	0	; select bank0
  3446  031A  01A4               	clrf	_isInitialized
  3447  031B  01A5               	clrf	_isInitialized+1
  3448                           
  3449                           ;state_manager.c: 20: getCurrentState();
  3450  031C  2233               	fcall	_getCurrentState
  3451  031D  0008               	return
  3452  031E                     __end_of_initStateManager:	
  3453                           
  3454                           	psect	text17
  3455  0233                     __ptext17:	
  3456 ;; *************** function _getCurrentState *****************
  3457 ;; Defined at:
  3458 ;;		line 23 in file "state_manager.c"
  3459 ;; Parameters:    Size  Location     Type
  3460 ;;		None
  3461 ;; Auto vars:     Size  Location     Type
  3462 ;;  r               1    0[BANK0 ] unsigned char 
  3463 ;; Return value:  Size  Location     Type
  3464 ;;                  4  155[None  ] struct .
  3465 ;; Registers used:
  3466 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3467 ;; Tracked objects:
  3468 ;;		On entry : 0/0
  3469 ;;		On exit  : 0/0
  3470 ;;		Unchanged: 0/0
  3471 ;; Data sizes:     COMMON   BANK0   BANK1
  3472 ;;      Params:         0       0       0
  3473 ;;      Locals:         0       1       0
  3474 ;;      Temps:          2       0       0
  3475 ;;      Totals:         2       1       0
  3476 ;;Total ram usage:        3 bytes
  3477 ;; Hardware stack levels used:    1
  3478 ;; Hardware stack levels required when called:    3
  3479 ;; This function calls:
  3480 ;;		_HEF_ByteArrayRead
  3481 ;; This function is called by:
  3482 ;;		_initStateManager
  3483 ;;		_getSwitch2State
  3484 ;; This function uses a non-reentrant model
  3485 ;;
  3486                           
  3487                           
  3488                           ;psect for function _getCurrentState
  3489  0233                     _getCurrentState:	
  3490                           
  3491                           ;state_manager.c: 24: if (!isInitialized) {
  3492                           
  3493                           ;incstack = 0
  3494                           ; Regs used in _getCurrentState: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3495  0233  0020               	movlb	0	; select bank0
  3496  0234  0824               	movf	_isInitialized,w
  3497  0235  0425               	iorwf	_isInitialized+1,w
  3498  0236  1D03               	btfss	3,2
  3499  0237  0008               	return
  3500                           
  3501                           ;state_manager.c: 25: uint8_t r;
  3502                           ;state_manager.c: 28: r = HEF_ByteArrayRead((void *) &pedalState, 1, sizeof (pedalState)
      +                          );
  3503  0238  01F4               	clrf	HEF_ByteArrayRead@block
  3504  0239  0AF4               	incf	HEF_ByteArrayRead@block,f
  3505  023A  3004               	movlw	4
  3506  023B  00FB               	movwf	??_getCurrentState
  3507  023C  087B               	movf	??_getCurrentState,w
  3508  023D  00F5               	movwf	HEF_ByteArrayRead@count
  3509  023E  302E               	movlw	(low (_pedalState| 0))& (0+255)
  3510  023F  21A8               	fcall	_HEF_ByteArrayRead
  3511  0240  00FC               	movwf	??_getCurrentState+1
  3512  0241  087C               	movf	??_getCurrentState+1,w
  3513  0242  0020               	movlb	0	; select bank0
  3514  0243  00B2               	movwf	getCurrentState@r
  3515                           
  3516                           ;state_manager.c: 30: if (pedalState.switch1 != 1) {
  3517  0244  032E               	decf	_pedalState,w
  3518  0245  042F               	iorwf	_pedalState+1,w
  3519  0246  1903               	btfsc	3,2
  3520  0247  2A4A               	goto	l1212
  3521                           
  3522                           ;state_manager.c: 31: pedalState.switch1 = 0;
  3523  0248  01AE               	clrf	_pedalState
  3524  0249  01AF               	clrf	_pedalState+1
  3525  024A                     l1212:	
  3526                           
  3527                           ;state_manager.c: 32: }
  3528                           ;state_manager.c: 34: if (pedalState.switch2 != 1) {
  3529  024A  0330               	decf	_pedalState+2,w
  3530  024B  0431               	iorwf	_pedalState+3,w
  3531  024C  1903               	btfsc	3,2
  3532  024D  2A50               	goto	l1216
  3533                           
  3534                           ;state_manager.c: 35: pedalState.switch2 = 0;
  3535  024E  01B0               	clrf	_pedalState+2
  3536  024F  01B1               	clrf	_pedalState+3
  3537  0250                     l1216:	
  3538                           
  3539                           ;state_manager.c: 36: }
  3540                           ;state_manager.c: 38: isInitialized = 1;
  3541  0250  3001               	movlw	1
  3542  0251  00A4               	movwf	_isInitialized
  3543  0252  3000               	movlw	0
  3544  0253  00A5               	movwf	_isInitialized+1
  3545  0254  0008               	return
  3546  0255                     __end_of_getCurrentState:	
  3547                           ;state_manager.c: 39: }
  3548                           ;state_manager.c: 40: return pedalState;
  3549                           ;	Return value of _getCurrentState is never used
  3550                           
  3551                           
  3552                           	psect	text18
  3553  01A8                     __ptext18:	
  3554 ;; *************** function _HEF_ByteArrayRead *****************
  3555 ;; Defined at:
  3556 ;;		line 53 in file "HEF.c"
  3557 ;; Parameters:    Size  Location     Type
  3558 ;;  bArray          1    wreg     PTR unsigned char 
  3559 ;;		 -> pedalState(4), 
  3560 ;;  block           1    4[COMMON] unsigned char 
  3561 ;;  count           1    5[COMMON] unsigned char 
  3562 ;; Auto vars:     Size  Location     Type
  3563 ;;  bArray          1   10[COMMON] PTR unsigned char 
  3564 ;;		 -> pedalState(4), 
  3565 ;;  wordAdd         2    8[COMMON] unsigned int 
  3566 ;; Return value:  Size  Location     Type
  3567 ;;                  1    wreg      char 
  3568 ;; Registers used:
  3569 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3570 ;; Tracked objects:
  3571 ;;		On entry : 0/0
  3572 ;;		On exit  : 0/0
  3573 ;;		Unchanged: 0/0
  3574 ;; Data sizes:     COMMON   BANK0   BANK1
  3575 ;;      Params:         2       0       0
  3576 ;;      Locals:         3       0       0
  3577 ;;      Temps:          2       0       0
  3578 ;;      Totals:         7       0       0
  3579 ;;Total ram usage:        7 bytes
  3580 ;; Hardware stack levels used:    1
  3581 ;; Hardware stack levels required when called:    2
  3582 ;; This function calls:
  3583 ;;		_FLASH_ReadWord
  3584 ;; This function is called by:
  3585 ;;		_getCurrentState
  3586 ;; This function uses a non-reentrant model
  3587 ;;
  3588                           
  3589                           
  3590                           ;psect for function _HEF_ByteArrayRead
  3591  01A8                     _HEF_ByteArrayRead:	
  3592                           
  3593                           ;incstack = 0
  3594                           ; Regs used in _HEF_ByteArrayRead: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3595                           ;HEF_ByteArrayRead@bArray stored from wreg
  3596  01A8  00FA               	movwf	HEF_ByteArrayRead@bArray
  3597                           
  3598                           ;HEF.c: 56: uint16_t wordAdd = block * 32 + 16384 - 128;
  3599  01A9  0874               	movf	HEF_ByteArrayRead@block,w
  3600  01AA  00F6               	movwf	??_HEF_ByteArrayRead
  3601  01AB  01F7               	clrf	??_HEF_ByteArrayRead+1
  3602  01AC  3005               	movlw	5
  3603  01AD                     u565:	
  3604  01AD  35F6               	lslf	??_HEF_ByteArrayRead,f
  3605  01AE  0DF7               	rlf	??_HEF_ByteArrayRead+1,f
  3606  01AF  0B89               	decfsz	9,f
  3607  01B0  29AD               	goto	u565
  3608  01B1  0876               	movf	??_HEF_ByteArrayRead,w
  3609  01B2  3E80               	addlw	128
  3610  01B3  00F8               	movwf	HEF_ByteArrayRead@wordAdd
  3611  01B4  303F               	movlw	63
  3612  01B5  3D77               	addwfc	??_HEF_ByteArrayRead+1,w
  3613  01B6  00F9               	movwf	HEF_ByteArrayRead@wordAdd+1
  3614                           
  3615                           ;HEF.c: 59: if ( ( count > 32) || ( block >= 128 / 32))
  3616  01B7  3021               	movlw	33
  3617  01B8  0275               	subwf	HEF_ByteArrayRead@count,w
  3618  01B9  1803               	skipnc
  3619  01BA  29BF               	goto	l1186
  3620  01BB  3004               	movlw	4
  3621  01BC  0274               	subwf	HEF_ByteArrayRead@block,w
  3622  01BD  1C03               	skipc
  3623  01BE  29D7               	goto	l1198
  3624  01BF                     l1186:	
  3625                           
  3626                           ;HEF.c: 60: return -1;
  3627  01BF  30FF               	movlw	255
  3628  01C0  0008               	return
  3629  01C1                     l1190:	
  3630                           ;HEF.c: 63: while ( count > 0)
  3631                           
  3632                           
  3633                           ;HEF.c: 64: {
  3634                           ;HEF.c: 65: *bArray++ = (uint8_t) FLASH_ReadWord( wordAdd++);
  3635  01C1  0879               	movf	HEF_ByteArrayRead@wordAdd+1,w
  3636  01C2  00F2               	movwf	FLASH_ReadWord@flashAddr+1
  3637  01C3  0878               	movf	HEF_ByteArrayRead@wordAdd,w
  3638  01C4  00F1               	movwf	FLASH_ReadWord@flashAddr
  3639  01C5  2271               	fcall	_FLASH_ReadWord
  3640  01C6  0871               	movf	?_FLASH_ReadWord,w
  3641  01C7  00F6               	movwf	??_HEF_ByteArrayRead
  3642  01C8  087A               	movf	HEF_ByteArrayRead@bArray,w
  3643  01C9  0086               	movwf	6
  3644  01CA  0187               	clrf	7
  3645  01CB  0876               	movf	??_HEF_ByteArrayRead,w
  3646  01CC  0081               	movwf	1
  3647  01CD  3001               	movlw	1
  3648  01CE  07F8               	addwf	HEF_ByteArrayRead@wordAdd,f
  3649  01CF  3000               	movlw	0
  3650  01D0  3DF9               	addwfc	HEF_ByteArrayRead@wordAdd+1,f
  3651  01D1  3001               	movlw	1
  3652  01D2  00F6               	movwf	??_HEF_ByteArrayRead
  3653  01D3  0876               	movf	??_HEF_ByteArrayRead,w
  3654  01D4  07FA               	addwf	HEF_ByteArrayRead@bArray,f
  3655                           
  3656                           ;HEF.c: 66: count--;
  3657  01D5  3001               	movlw	1
  3658  01D6  02F5               	subwf	HEF_ByteArrayRead@count,f
  3659  01D7                     l1198:	
  3660  01D7  0875               	movf	HEF_ByteArrayRead@count,w
  3661  01D8  1D03               	btfss	3,2
  3662  01D9  29C1               	goto	l1190
  3663                           
  3664                           ;HEF.c: 67: }
  3665                           ;HEF.c: 70: return 0;
  3666  01DA  3000               	movlw	0
  3667  01DB  0008               	return
  3668  01DC                     __end_of_HEF_ByteArrayRead:	
  3669                           
  3670                           	psect	text19
  3671  0271                     __ptext19:	
  3672 ;; *************** function _FLASH_ReadWord *****************
  3673 ;; Defined at:
  3674 ;;		line 58 in file "mcc_generated_files/memory.c"
  3675 ;; Parameters:    Size  Location     Type
  3676 ;;  flashAddr       2    1[COMMON] unsigned int 
  3677 ;; Auto vars:     Size  Location     Type
  3678 ;;  GIEBitValue     1    3[COMMON] unsigned char 
  3679 ;; Return value:  Size  Location     Type
  3680 ;;                  2    1[COMMON] unsigned int 
  3681 ;; Registers used:
  3682 ;;		wreg, status,2, status,0
  3683 ;; Tracked objects:
  3684 ;;		On entry : 0/0
  3685 ;;		On exit  : 0/0
  3686 ;;		Unchanged: 0/0
  3687 ;; Data sizes:     COMMON   BANK0   BANK1
  3688 ;;      Params:         2       0       0
  3689 ;;      Locals:         1       0       0
  3690 ;;      Temps:          0       0       0
  3691 ;;      Totals:         3       0       0
  3692 ;;Total ram usage:        3 bytes
  3693 ;; Hardware stack levels used:    1
  3694 ;; Hardware stack levels required when called:    1
  3695 ;; This function calls:
  3696 ;;		Nothing
  3697 ;; This function is called by:
  3698 ;;		_HEF_ByteArrayRead
  3699 ;;		_FLASH_WriteWord
  3700 ;;		_HEF_ByteRead
  3701 ;; This function uses a non-reentrant model
  3702 ;;
  3703                           
  3704                           
  3705                           ;psect for function _FLASH_ReadWord
  3706  0271                     _FLASH_ReadWord:	
  3707                           
  3708                           ;memory.c: 59: uint8_t GIEBitValue = INTCONbits.GIE;
  3709                           
  3710                           ;incstack = 0
  3711                           ; Regs used in _FLASH_ReadWord: [wreg+status,2+status,0]
  3712  0271  3000               	movlw	0
  3713  0272  1B8B               	btfsc	11,7	;volatile
  3714  0273  3001               	movlw	1
  3715  0274  00F3               	movwf	FLASH_ReadWord@GIEBitValue
  3716                           
  3717                           ;memory.c: 61: INTCONbits.GIE = 0;
  3718  0275  138B               	bcf	11,7	;volatile
  3719                           
  3720                           ;memory.c: 62: PMADRL = (flashAddr & 0x00FF);
  3721  0276  0871               	movf	FLASH_ReadWord@flashAddr,w
  3722  0277  0023               	movlb	3	; select bank3
  3723  0278  0091               	movwf	17	;volatile
  3724                           
  3725                           ;memory.c: 63: PMADRH = ((flashAddr & 0xFF00) >> 8);
  3726  0279  0872               	movf	FLASH_ReadWord@flashAddr+1,w
  3727  027A  0092               	movwf	18	;volatile
  3728                           
  3729                           ;memory.c: 65: PMCON1bits.CFGS = 0;
  3730  027B  1315               	bcf	21,6	;volatile
  3731                           
  3732                           ;memory.c: 66: PMCON1bits.RD = 1;
  3733  027C  1415               	bsf	21,0	;volatile
  3734                           
  3735                           ;memory.c: 67: __nop();
  3736  027D  0000               	nop
  3737                           
  3738                           ;memory.c: 68: __nop();
  3739  027E  0000               	nop
  3740                           
  3741                           ;memory.c: 69: INTCONbits.GIE = GIEBitValue;
  3742  027F  0C73               	rrf	FLASH_ReadWord@GIEBitValue,w
  3743  0280  1C03               	skipc
  3744  0281  138B               	bcf	11,7	;volatile
  3745  0282  1803               	skipnc
  3746  0283  178B               	bsf	11,7	;volatile
  3747                           
  3748                           ;memory.c: 71: return ((PMDATH << 8) | PMDATL);
  3749  0284  0023               	movlb	3	; select bank3
  3750  0285  0814               	movf	20,w	;volatile
  3751  0286  00F2               	movwf	?_FLASH_ReadWord+1
  3752  0287  0813               	movf	19,w	;volatile
  3753  0288  00F1               	movwf	?_FLASH_ReadWord
  3754  0289  0008               	return
  3755  028A                     __end_of_FLASH_ReadWord:	
  3756                           
  3757                           	psect	text20
  3758  028A                     __ptext20:	
  3759 ;; *************** function _InitApp *****************
  3760 ;; Defined at:
  3761 ;;		line 27 in file "user.c"
  3762 ;; Parameters:    Size  Location     Type
  3763 ;;		None
  3764 ;; Auto vars:     Size  Location     Type
  3765 ;;		None
  3766 ;; Return value:  Size  Location     Type
  3767 ;;                  1    wreg      void 
  3768 ;; Registers used:
  3769 ;;		wreg, status,2, status,0, pclath, cstack
  3770 ;; Tracked objects:
  3771 ;;		On entry : 0/0
  3772 ;;		On exit  : 0/0
  3773 ;;		Unchanged: 0/0
  3774 ;; Data sizes:     COMMON   BANK0   BANK1
  3775 ;;      Params:         0       0       0
  3776 ;;      Locals:         0       0       0
  3777 ;;      Temps:          0       0       0
  3778 ;;      Totals:         0       0       0
  3779 ;;Total ram usage:        0 bytes
  3780 ;; Hardware stack levels used:    1
  3781 ;; Hardware stack levels required when called:    2
  3782 ;; This function calls:
  3783 ;;		_init_adc
  3784 ;; This function is called by:
  3785 ;;		_main
  3786 ;; This function uses a non-reentrant model
  3787 ;;
  3788                           
  3789                           
  3790                           ;psect for function _InitApp
  3791  028A                     _InitApp:	
  3792                           
  3793                           ;user.c: 28: TRISAbits.TRISA0 = 0;
  3794                           
  3795                           ;incstack = 0
  3796                           ; Regs used in _InitApp: [wreg+status,2+status,0+pclath+cstack]
  3797  028A  0021               	movlb	1	; select bank1
  3798  028B  100C               	bcf	12,0	;volatile
  3799                           
  3800                           ;user.c: 29: TRISAbits.TRISA1 = 0;
  3801  028C  108C               	bcf	12,1	;volatile
  3802                           
  3803                           ;user.c: 31: TRISAbits.TRISA2 = 0;
  3804  028D  110C               	bcf	12,2	;volatile
  3805                           
  3806                           ;user.c: 32: TRISAbits.TRISA4 = 1;
  3807  028E  160C               	bsf	12,4	;volatile
  3808                           
  3809                           ;user.c: 33: TRISAbits.TRISA5 = 1;
  3810  028F  168C               	bsf	12,5	;volatile
  3811                           
  3812                           ;user.c: 34: ANSELAbits.ANSA4 = 0;
  3813  0290  0023               	movlb	3	; select bank3
  3814  0291  120C               	bcf	12,4	;volatile
  3815                           
  3816                           ;user.c: 36: TRISCbits.TRISC0 = 0;
  3817  0292  0021               	movlb	1	; select bank1
  3818  0293  100E               	bcf	14,0	;volatile
  3819                           
  3820                           ;user.c: 37: TRISCbits.TRISC1 = 0;
  3821  0294  108E               	bcf	14,1	;volatile
  3822                           
  3823                           ;user.c: 38: TRISCbits.TRISC2 = 0;
  3824  0295  110E               	bcf	14,2	;volatile
  3825                           
  3826                           ;user.c: 39: TRISCbits.TRISC3 = 0;
  3827  0296  118E               	bcf	14,3	;volatile
  3828                           
  3829                           ;user.c: 40: TRISCbits.TRISC4 = 0;
  3830  0297  120E               	bcf	14,4	;volatile
  3831                           
  3832                           ;user.c: 41: TRISCbits.TRISC5 = 0;
  3833  0298  128E               	bcf	14,5	;volatile
  3834                           
  3835                           ;user.c: 43: LATCbits.LATC5 = 0;
  3836  0299  0022               	movlb	2	; select bank2
  3837  029A  128E               	bcf	14,5	;volatile
  3838                           
  3839                           ;user.c: 45: LATAbits.LATA2 = 0;
  3840  029B  110C               	bcf	12,2	;volatile
  3841                           
  3842                           ;user.c: 46: LATCbits.LATC3 = 0;
  3843  029C  118E               	bcf	14,3	;volatile
  3844                           
  3845                           ;user.c: 48: init_adc();
  3846  029D  22ED               	fcall	_init_adc
  3847  029E  0008               	return
  3848  029F                     __end_of_InitApp:	
  3849                           
  3850                           	psect	text21
  3851  02ED                     __ptext21:	
  3852 ;; *************** function _init_adc *****************
  3853 ;; Defined at:
  3854 ;;		line 60 in file "user.c"
  3855 ;; Parameters:    Size  Location     Type
  3856 ;;		None
  3857 ;; Auto vars:     Size  Location     Type
  3858 ;;		None
  3859 ;; Return value:  Size  Location     Type
  3860 ;;                  1    wreg      void 
  3861 ;; Registers used:
  3862 ;;		wreg, status,2, status,0
  3863 ;; Tracked objects:
  3864 ;;		On entry : 0/0
  3865 ;;		On exit  : 0/0
  3866 ;;		Unchanged: 0/0
  3867 ;; Data sizes:     COMMON   BANK0   BANK1
  3868 ;;      Params:         0       0       0
  3869 ;;      Locals:         0       0       0
  3870 ;;      Temps:          0       0       0
  3871 ;;      Totals:         0       0       0
  3872 ;;Total ram usage:        0 bytes
  3873 ;; Hardware stack levels used:    1
  3874 ;; Hardware stack levels required when called:    1
  3875 ;; This function calls:
  3876 ;;		Nothing
  3877 ;; This function is called by:
  3878 ;;		_InitApp
  3879 ;; This function uses a non-reentrant model
  3880 ;;
  3881                           
  3882                           
  3883                           ;psect for function _init_adc
  3884  02ED                     _init_adc:	
  3885                           
  3886                           ;user.c: 61: ADCON1bits.ADFM = 0b1;
  3887                           
  3888                           ;incstack = 0
  3889                           ; Regs used in _init_adc: [wreg+status,2+status,0]
  3890  02ED  0021               	movlb	1	; select bank1
  3891  02EE  179E               	bsf	30,7	;volatile
  3892                           
  3893                           ;user.c: 62: ADCON1bits.ADCS = 0b110;
  3894  02EF  081E               	movf	30,w	;volatile
  3895  02F0  398F               	andlw	-113
  3896  02F1  3860               	iorlw	96
  3897  02F2  009E               	movwf	30	;volatile
  3898                           
  3899                           ;user.c: 63: ADCON1bits.ADPREF = 0b00;
  3900  02F3  30FC               	movlw	-4
  3901  02F4  059E               	andwf	30,f	;volatile
  3902                           
  3903                           ;user.c: 64: ADCON0bits.ADON = 0b1;
  3904  02F5  141D               	bsf	29,0	;volatile
  3905  02F6  0008               	return
  3906  02F7                     __end_of_init_adc:	
  3907                           
  3908                           	psect	text22
  3909  031E                     __ptext22:	
  3910 ;; *************** function _ConfigureOscillator *****************
  3911 ;; Defined at:
  3912 ;;		line 17 in file "system.c"
  3913 ;; Parameters:    Size  Location     Type
  3914 ;;		None
  3915 ;; Auto vars:     Size  Location     Type
  3916 ;;		None
  3917 ;; Return value:  Size  Location     Type
  3918 ;;                  1    wreg      void 
  3919 ;; Registers used:
  3920 ;;		wreg, status,2, status,0
  3921 ;; Tracked objects:
  3922 ;;		On entry : 0/0
  3923 ;;		On exit  : 0/0
  3924 ;;		Unchanged: 0/0
  3925 ;; Data sizes:     COMMON   BANK0   BANK1
  3926 ;;      Params:         0       0       0
  3927 ;;      Locals:         0       0       0
  3928 ;;      Temps:          0       0       0
  3929 ;;      Totals:         0       0       0
  3930 ;;Total ram usage:        0 bytes
  3931 ;; Hardware stack levels used:    1
  3932 ;; Hardware stack levels required when called:    1
  3933 ;; This function calls:
  3934 ;;		Nothing
  3935 ;; This function is called by:
  3936 ;;		_main
  3937 ;; This function uses a non-reentrant model
  3938 ;;
  3939                           
  3940                           
  3941                           ;psect for function _ConfigureOscillator
  3942  031E                     _ConfigureOscillator:	
  3943                           
  3944                           ;system.c: 19: OSCCONbits.IRCF = 0b1111;
  3945                           
  3946                           ;incstack = 0
  3947                           ; Regs used in _ConfigureOscillator: [wreg+status,2+status,0]
  3948  031E  3078               	movlw	120
  3949  031F  0021               	movlb	1	; select bank1
  3950  0320  0499               	iorwf	25,f	;volatile
  3951                           
  3952                           ;system.c: 20: OSCSTAT = 0x00;
  3953  0321  019A               	clrf	26	;volatile
  3954  0322  0008               	return
  3955  0323                     __end_of_ConfigureOscillator:	
  3956                           
  3957                           	psect	intentry
  3958  0004                     __pintentry:	
  3959 ;; *************** function _isr *****************
  3960 ;; Defined at:
  3961 ;;		line 23 in file "interrupts.c"
  3962 ;; Parameters:    Size  Location     Type
  3963 ;;		None
  3964 ;; Auto vars:     Size  Location     Type
  3965 ;;		None
  3966 ;; Return value:  Size  Location     Type
  3967 ;;                  1    wreg      void 
  3968 ;; Registers used:
  3969 ;;		None
  3970 ;; Tracked objects:
  3971 ;;		On entry : 0/0
  3972 ;;		On exit  : 0/0
  3973 ;;		Unchanged: 0/0
  3974 ;; Data sizes:     COMMON   BANK0   BANK1
  3975 ;;      Params:         0       0       0
  3976 ;;      Locals:         0       0       0
  3977 ;;      Temps:          1       0       0
  3978 ;;      Totals:         1       0       0
  3979 ;;Total ram usage:        1 bytes
  3980 ;; Hardware stack levels used:    1
  3981 ;; This function calls:
  3982 ;;		Nothing
  3983 ;; This function is called by:
  3984 ;;		Interrupt level 1
  3985 ;; This function uses a non-reentrant model
  3986 ;;
  3987                           
  3988  0004                     _isr:	
  3989                           
  3990                           ;incstack = 0
  3991                           ; Regs used in _isr: []
  3992  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  3993  0005  3180               	pagesel	$
  3994  0006  0020               	movlb	0	; select bank0
  3995  0007  087F               	movf	127,w
  3996  0008  00F0               	movwf	??_isr
  3997  0009  0870               	movf	??_isr,w
  3998  000A  00FF               	movwf	127
  3999  000B  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  4000  000C  0009               	retfie
  4001  000D                     __end_of_isr:	
  4002  007E                     btemp	set	126	;btemp
  4003  007E                     int$flags	set	126
  4004  007E                     wtemp	set	126
  4005  007E                     wtemp0	set	126
  4006  0080                     wtemp1	set	128
  4007  0082                     wtemp2	set	130
  4008  0084                     wtemp3	set	132
  4009  0086                     wtemp4	set	134
  4010  0088                     wtemp5	set	136
  4011  007F                     wtemp6	set	127
  4012  007E                     ttemp	set	126
  4013  007E                     ttemp0	set	126
  4014  0081                     ttemp1	set	129
  4015  0084                     ttemp2	set	132
  4016  0087                     ttemp3	set	135
  4017  007F                     ttemp4	set	127
  4018  007E                     ltemp	set	126
  4019  007E                     ltemp0	set	126
  4020  0082                     ltemp1	set	130
  4021  0086                     ltemp2	set	134
  4022  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    0
    Data        8
    BSS         18
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      13
    BANK0            80      9      35
    BANK1            32      0       0

Pointer List with Targets:

    HEF_ByteArrayRead@bArray	PTR unsigned char  size(1) Largest target is 4
		 -> pedalState(BANK0[4]), 

    HEF_ByteArrayWrite@byteArray	PTR unsigned char  size(1) Largest target is 4
		 -> pedalState(BANK0[4]), 


Critical Paths under _main in COMMON

    _updateSwitch2State->_saveState
    _getSwitch2State->_getCurrentState
    _wait_ms->___lmul
    _updateSwitch1State->_saveState
    _saveState->_HEF_ByteArrayWrite
    _HEF_ByteArrayWrite->_FLASH_EraseBlock
    _initStateManager->_getCurrentState
    _getCurrentState->_HEF_ByteArrayRead
    _HEF_ByteArrayRead->_FLASH_ReadWord

Critical Paths under _isr in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_initSwitch1
    _main->_initSwitch2
    _updateSwitch2->_setSwitch2State
    _updateSwitch1->_setSwitch1State
    _initSwitch2->_setSwitch2State
    _setSwitch2State->_updateSwitch2State
    _updateSwitch2State->_saveState
    _getSwitch2State->_getCurrentState
    _initSwitch1->_setSwitch1State
    _setSwitch1State->_updateSwitch1State
    _updateSwitch1State->_saveState
    _initStateManager->_getCurrentState

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    6898
                _ConfigureOscillator
                            _InitApp
                        _initSwitch1
                        _initSwitch2
                      _updateSwitch1
                      _updateSwitch2
 ---------------------------------------------------------------------------------
 (1) _updateSwitch2                                        1     1      0    1436
                                              7 BANK0      1     1      0
                    _setSwitch2State
 ---------------------------------------------------------------------------------
 (1) _updateSwitch1                                        1     1      0    1436
                                              7 BANK0      1     1      0
                    _setSwitch1State
 ---------------------------------------------------------------------------------
 (1) _initSwitch2                                          2     2      0    2013
                                              7 BANK0      2     2      0
                    _getSwitch2State
                    _setSwitch2State
 ---------------------------------------------------------------------------------
 (2) _setSwitch2State                                      2     0      2    1436
                                              5 BANK0      2     0      2
                 _updateSwitch2State
                            _wait_ms
 ---------------------------------------------------------------------------------
 (3) _updateSwitch2State                                   2     0      2     636
                                              3 BANK0      2     0      2
                          _saveState
 ---------------------------------------------------------------------------------
 (2) _getSwitch2State                                      2     0      2     554
                                              1 BANK0      2     0      2
                    _getCurrentState
 ---------------------------------------------------------------------------------
 (1) _initSwitch1                                          2     2      0    2013
                                              7 BANK0      2     2      0
                    _getSwitch1State
                    _setSwitch1State
 ---------------------------------------------------------------------------------
 (2) _setSwitch1State                                      2     0      2    1436
                                              5 BANK0      2     0      2
                 _updateSwitch1State
                            _wait_ms
 ---------------------------------------------------------------------------------
 (3) _wait_ms                                              2     0      2     498
                                              0 BANK0      2     0      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (4) ___lmul                                              12     4      8     220
                                              1 COMMON    12     4      8
 ---------------------------------------------------------------------------------
 (3) _updateSwitch1State                                   2     0      2     636
                                              3 BANK0      2     0      2
                          _saveState
 ---------------------------------------------------------------------------------
 (4) _saveState                                            4     4      0     527
                                             12 COMMON     1     1      0
                                              0 BANK0      3     3      0
                 _HEF_ByteArrayWrite
 ---------------------------------------------------------------------------------
 (5) _HEF_ByteArrayWrite                                   9     7      2     526
                                              4 COMMON     8     6      2
                   _FLASH_EraseBlock
 ---------------------------------------------------------------------------------
 (6) _FLASH_EraseBlock                                     3     1      2     195
                                              1 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (2) _getSwitch1State                                      2     0      2     554
                                              1 BANK0      2     0      2
                   _initStateManager
 ---------------------------------------------------------------------------------
 (3) _initStateManager                                     0     0      0     554
                    _getCurrentState
 ---------------------------------------------------------------------------------
 (3) _getCurrentState                                      3     3      0     554
                                             11 COMMON     2     2      0
                                              0 BANK0      1     1      0
                  _HEF_ByteArrayRead
 ---------------------------------------------------------------------------------
 (4) _HEF_ByteArrayRead                                    7     5      2     553
                                              4 COMMON     7     5      2
                     _FLASH_ReadWord
 ---------------------------------------------------------------------------------
 (5) _FLASH_ReadWord                                       3     1      2     259
                                              1 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              0     0      0       0
                           _init_adc
 ---------------------------------------------------------------------------------
 (2) _init_adc                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _isr                                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _InitApp
     _init_adc
   _initSwitch1
     _getSwitch1State
       _initStateManager
         _getCurrentState
           _HEF_ByteArrayRead
             _FLASH_ReadWord
     _setSwitch1State
       _updateSwitch1State
         _saveState
           _HEF_ByteArrayWrite
             _FLASH_EraseBlock
       _wait_ms
         ___lmul
   _initSwitch2
     _getSwitch2State
       _getCurrentState
         _HEF_ByteArrayRead
           _FLASH_ReadWord
     _setSwitch2State
       _updateSwitch2State
         _saveState
           _HEF_ByteArrayWrite
             _FLASH_EraseBlock
       _wait_ms
         ___lmul
   _updateSwitch1
     _setSwitch1State
       _updateSwitch1State
         _saveState
           _HEF_ByteArrayWrite
             _FLASH_EraseBlock
       _wait_ms
         ___lmul
   _updateSwitch2
     _setSwitch2State
       _updateSwitch2State
         _saveState
           _HEF_ByteArrayWrite
             _FLASH_EraseBlock
       _wait_ms
         ___lmul

 _isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              70      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      D       D       2       92.9%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      30       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50      9      23       6       43.8%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            20      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               20      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
DATA                 0      0      30       9        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Fri Aug 26 22:49:00 2016

                _updateSwitch1 0081                  _updateSwitch2 0021                    __CFG_CP$OFF 0000  
                           l71 0224                    __CFG_LVP$ON 0000                            l141 012B  
                          u535 00F4                            u720 0190                            u715 0175  
                          u565 01AD                            u645 01EF                            u750 0156  
                          u655 01F6                            u745 013B                            u835 00CA  
                          u915 006A                            u785 008D                            u865 002D  
                          u795 009D                            u875 003D                _getCurrentState 0233  
                          _isr 0004                   __CFG_BORV$LO 0000                            wreg 0009  
                         l1212 024A                           l1134 00EE                           l1216 0250  
                         l1224 01E4                           l1138 00F0                           l1172 0108  
                         l1228 01EE                           l1308 0158                           l1340 00B6  
                         l1332 00A4                           l1190 01C1                           l1264 02E7  
                         l1248 02C3                           l1256 02B6                           l1352 00D5  
                         l1344 00BD                           l1328 0094                           l1186 01BF  
                         l1346 00C1                           l1380 005D                           l1364 0034  
                         l1198 01D7                           l1286 0192                           l1382 0061  
                         l1376 0056                           l1368 0044                           l1466 0303  
                         l1388 0075                           ?_isr 0070                   __CFG_WRT$OFF 0000  
   __end_of_HEF_ByteArrayWrite 0134                           _main 02FF                           fsr0h 0005  
                         fsr1h 0007                           fsr0l 0004                           indf0 0000  
                         indf1 0001                           fsr1l 0006                           btemp 007E  
                         ltemp 007E                           start 000D                           ttemp 007E  
                         wtemp 007E                  __CFG_MCLRE$ON 0000                 ?_updateSwitch1 0070  
               ?_updateSwitch2 0070                __end_of_InitApp 029F                          ??_isr 0070  
                        ?_main 0070                   ?_initSwitch1 0070                   ?_initSwitch2 0070  
                __CFG_WDTE$OFF 0000                          _PMADR 0191       __size_of_getSwitch1State 000C  
     __size_of_getSwitch2State 0007            _ConfigureOscillator 031E            ___lmul@multiplicand 0075  
           _updateSwitch1State 02BC             _updateSwitch2State 02AF                 __CFG_BOREN$OFF 0000  
                        ltemp0 007E                          ltemp1 0082                          ltemp2 0086  
                        ltemp3 0080                __end_of_wait_ms 0233                          ttemp0 007E  
                        ttemp1 0081                          ttemp2 0084                          ttemp3 0087  
                        ttemp4 007F                          status 0003         HEF_ByteArrayRead@block 0074  
                        wtemp0 007E                          wtemp1 0080                          wtemp2 0082  
                        wtemp3 0084                          wtemp4 0086                          wtemp5 0088  
                        wtemp6 007F         HEF_ByteArrayRead@count 0075            ?_updateSwitch1State 0035  
          ?_updateSwitch2State 0035           ?_ConfigureOscillator 0070                __initialization 000E  
                 __end_of_main 0306        __end_of_getCurrentState 0255                 __CFG_LPBOR$OFF 0000  
             _initStateManager 0319                         ??_main 007D           ??_updateSwitch1State 007D  
      __size_of_FLASH_ReadWord 0019           ??_updateSwitch2State 007D              _HEF_ByteArrayRead 01A8  
                       _ADRESH 009C                         _ADRESL 009B             ?_HEF_ByteArrayRead 0074  
                       _PMADRH 0192                         _PMADRL 0191                         _PMDATH 0194  
                       _PMDATL 0193                         _PMCON2 0196      __size_of_FLASH_EraseBlock 001C  
                    ??_InitApp 0071          ??_ConfigureOscillator 0071                ??_updateSwitch1 0039  
              ??_updateSwitch2 0039            ??_HEF_ByteArrayRead 0076                 __CFG_PWRTE$OFF 0000  
                       ___lmul 01DC                 __CFG_STVREN$ON 0000               __end_of_init_adc 02F7  
      FLASH_ReadWord@flashAddr 0071      __end_of_HEF_ByteArrayRead 01DC        HEF_ByteArrayRead@bArray 007A  
                    ??_wait_ms 007D                  _switch1_state 003B                  _switch2_state 003F  
            ??_getSwitch1State 007D              ??_getSwitch2State 007D        __end_of__initialization 001E  
             getCurrentState@r 0032                 __pcstackCOMMON 0070                   __pidataBANK0 02F7  
             ?_getCurrentState 0070           __size_of_initSwitch1 000C           __size_of_initSwitch2 000C  
                   __pbssBANK0 0020         setSwitch1State@f_state 0037                     __pmaintext 02FF  
                      ?___lmul 0071                     __pintentry 0004             _HEF_ByteArrayWrite 00E1  
           __size_of_saveState 0010       __size_of_setSwitch1State 003A       __size_of_setSwitch2State 003A  
               ___lmul@product 0079                 _FLASH_ReadWord 0271            ?_HEF_ByteArrayWrite 0074  
   __size_of_HEF_ByteArrayRead 0034                        _OSCSTAT 009A               _FLASH_EraseBlock 0255  
     __end_of_initStateManager 031E                      ?_init_adc 0070                        _InitApp 028A  
         ??_HEF_ByteArrayWrite 0076                     _pedalState 002E                __size_of___lmul 002F  
       __end_of_FLASH_ReadWord 028A                        __ptext1 0021                        __ptext2 0081  
                      __ptext3 02C9                        __ptext4 0134                        __ptext5 02AF  
                      __ptext6 0306                        __ptext7 02D5                        __ptext8 016E  
                      __ptext9 020B                      _T2CONbits 001C                   __size_of_isr 0009  
                      _wait_ms 020B                        clrloop0 030E           end_of_initialization 001E  
            __end_of_saveState 02AF                        init_ram 0313                     ??_init_adc 0071  
                      initloop 0314         setSwitch2State@f_state 0037                    wait_ms@time 0032  
    FLASH_ReadWord@GIEBitValue 0073                 _switch1_toggle 0028                 _switch2_toggle 002C  
              ?_FLASH_ReadWord 0071                      _PORTAbits 000C                _getSwitch1State 02E1  
              _getSwitch2State 0306    __size_of_updateSwitch1State 000D    __size_of_updateSwitch2State 000D  
            ??_setSwitch1State 007D               __CFG_FOSC$INTOSC 0000              ??_setSwitch2State 007D  
                    _TRISAbits 008C                      _TRISCbits 008E       HEF_ByteArrayRead@wordAdd 0078  
  __end_of_ConfigureOscillator 0323        HEF_ByteArrayWrite@block 0079        HEF_ByteArrayWrite@count 0075  
                   _switch1_up 003D                     _switch2_up 0041          __end_of_updateSwitch1 00E1  
        __end_of_updateSwitch2 0081                 __end_of___lmul 020B            start_initialization 000E  
                  __end_of_isr 000D                       ??___lmul 0079        __end_of_getSwitch1State 02ED  
      __end_of_getSwitch2State 030D                    __pdataBANK0 003B    FLASH_EraseBlock@GIEBitValue 0073  
     __end_of_FLASH_EraseBlock 0271                  ??_initSwitch1 007D                  ??_initSwitch2 007D  
                    ___latbits 0000        updateSwitch1State@state 0035                  __pcstackBANK0 0032  
     __size_of_getCurrentState 0022              ?_initStateManager 0070                       ?_InitApp 0070  
            __size_of_init_adc 000A             ??_initStateManager 007D        updateSwitch2State@state 0035  
  HEF_ByteArrayWrite@blockAddr 007A                     saveState@r 007C                       ?_wait_ms 0032  
          __end_of_initSwitch1 02E1            __end_of_initSwitch2 02D5    HEF_ByteArrayWrite@byteArray 0074  
                     _LATAbits 010C                       _LATCbits 010E                      clear_ram0 030D  
                    _saveState 029F    __size_of_HEF_ByteArrayWrite 0053                       _PIR1bits 0011  
    FLASH_EraseBlock@startAddr 0071               ??_FLASH_ReadWord 0073                _setSwitch1State 016E  
              _setSwitch2State 0134               ?_getSwitch1State 0033               ?_getSwitch2State 0033  
                   _ADCON0bits 009D                     _ADCON1bits 009E              ___lmul@multiplier 0071  
            ??_getCurrentState 007B           initSwitch1@initState 0039                     ?_saveState 0070  
             __size_of_InitApp 0015           initSwitch2@initState 0039     __end_of_updateSwitch1State 02C9  
   __end_of_updateSwitch2State 02BC                    _initSwitch1 02D5                    _initSwitch2 02C9  
                   _ANSELAbits 018C                       __ptext10 01DC                       __ptext11 02BC  
                     __ptext20 028A                       __ptext12 029F                       __ptext21 02ED  
                     __ptext13 00E1                       __ptext22 031E                       __ptext14 0255  
                     __ptext15 02E1                       __ptext16 0319                       __ptext17 0233  
                     __ptext18 01A8                       __ptext19 0271               __size_of_wait_ms 0028  
                     _init_adc 02ED                  __size_of_main 0007        __end_of_setSwitch1State 01A8  
      __end_of_setSwitch2State 016E   __size_of_ConfigureOscillator 0005                       int$flags 007E  
            ?_FLASH_EraseBlock 0071             ??_FLASH_EraseBlock 0073                     _INTCONbits 000B  
       __size_of_updateSwitch1 0060         __size_of_updateSwitch2 0060                       intlevel1 0000  
                   _PMCON1bits 0195  HEF_ByteArrayWrite@GIEBitValue 0078              __CFG_CLKOUTEN$OFF 0000  
                  ??_saveState 0032                     _OSCCONbits 0099                  _isInitialized 0024  
                 wait_ms@timel 0020      __size_of_initStateManager 0005                _switch1_pressed 0026  
              _switch2_pressed 002A               ?_setSwitch1State 0037               ?_setSwitch2State 0037  
